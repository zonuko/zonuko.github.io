{
  "version": "https://jsonfeed.org/version/1",
  "title": "zonukoブログ",
  "home_page_url": "https://zonuko.github.io/",
  "feed_url": "https://zonuko.github.io/feed.json",
  "description": "zonukoが好き勝手なこと書くブログ",
  "author": {
    "name": "zonuko",
    "url": "https://zonuko.github.io/"
  },
  "items": [
    {
      "id": "https://zonuko.github.io/posts/blog-to-lume/",
      "url": "https://zonuko.github.io/posts/blog-to-lume/",
      "title": "blogをdeno製静的サイトジェネレーターlumeに移植した",
      "content_html": "<p>blogをdeno製静的サイトジェネレーターlumeに移植した\n################################</p>\n<p>何年ぶりだって感じですが、久々のブログです。\n色々あって(転職したり、病気したり)、なかなかブログ書くって感じでもなかったですが、思い切ってツールごと切り替えたので紹介です。</p>\n<h1>============================================\ndeno製静的サイトジェネレーター「lume」</h1>\n<p><code>https://lume.land/ &lt;https://lume.land/&gt;</code>_</p>\n<p>JavaScript/TypeScriptのランタイムであるdenoでできている静的サイトジェネレーターです。</p>\n<ul>\n<li>\n<p>自分でレンダリングやファイルローダーカスタマイズできるPlugin機構がある</p>\n<ul>\n<li>公式のPluginも初めから結構ある</li>\n<li>検索やタグ機能もプラグインで提供されている(デフォルトインストール済み)</li>\n</ul>\n</li>\n<li>\n<p>テンプレートもいくつか対応されている</p>\n<ul>\n<li>Markdown、Nunjucks、Pug、JSXなど</li>\n</ul>\n</li>\n<li>\n<p>denoなのでカスタムプラグインや設定などをTypeScriptで書ける</p>\n</li>\n</ul>\n<h1>============================================\n既存のブログ記事をlumeに移植する</h1>\n<p>このブログのマークアップ言語はrestructuredTextで書かれています。拡張子はrstです。\n色々プラグインありますが、rstファイルに対応しているものはないので自分でなんとかしないといけないです。</p>\n<p>今回は以下の方法で対応しました。</p>\n<ul>\n<li>rstのパーサー、レンダラーはRust製のものがあったのでWebAssemblyにしてdenoから扱う</li>\n<li>上記で作ったものはカスタムプラグインを作ってrstファイルの場合はそちらでレンダリングを行う</li>\n</ul>\n<p>denoがWeb標準のAPIに準拠しているおかげで、WebAssemblyさえ作れれば割りと拡張性が高いですね。</p>\n<h1>============================================\nRustでrstをレンダリングするWebAssemblyを作る</h1>\n<p>WebAssemblyのツールチェインとしては、denoのブログで紹介されている以下を使います。</p>\n<p><code>https://deno.com/blog/wasmbuild &lt;https://deno.com/blog/wasmbuild&gt;</code>_</p>\n<p>内部的にはwasm_bindgenというRustのツールチェインが使われています。rstのレンダリングに使っているcrate(Rustのライブラリ)は以下です。</p>\n<p><code>https://github.com/flying-sheep/rust-rst &lt;https://github.com/flying-sheep/rust-rst&gt;</code>_</p>\n<p>.. code-block:: Rust</p>\n<p>use rst_parser::parse;\nuse rst_renderer::render_html;\nuse std::str;\nuse wasm_bindgen::prelude::*;</p>\n<p>#[wasm_bindgen]\npub fn render_rst(rst: &amp;str, is_standalone: bool) -&gt; Result&lt;String, JsError&gt; {\nlet content = rst.replace('\\t', &quot; &quot;.repeat(8).as_ref());\nlet document = match parse(&amp;content) {\nOk(doc) =&gt; doc,\nErr(e) =&gt; return Err(JsError::new(e.to_string().as_ref())),\n};</p>\n<pre><code> let mut s = Vec::new();\n match render_html(&amp;document, &amp;mut s, is_standalone) {\n   Ok(_) =&gt; (),\n   Err(e) =&gt; return Err(JsError::new(e.to_string().as_ref())),\n }\n return Ok(str::from_utf8(&amp;s)?.to_string());\n</code></pre>\n<p>}</p>\n<p>#[cfg(test)]\nmod tests {\nconst TEST_DOC2: &amp;str = &quot;Programming Phoenix勉強その2\n################################</p>\n<p>:date: 2016-12-31 00:50\n:tags: Elixir,Phoenix\n:slug: programming-phoenix2\n:related_posts: programming-phoenix1\n:summary: Programming Phoenixって本を読むその2</p>\n<p>| その2です。\n| その1の続きです。</p>\n<h1>=========================================\nデフォルトのディレクトリ構成について</h1>\n<ul>\n<li>\n<p><code>config</code> ディレクトリ</p>\n<ul>\n<li>Phoenixの設定ファイル置き場.名前のまま.</li>\n<li><code>prod.secret.exs</code> は秘密情報が入っているファイルなので,VCSからは外すこと.</li>\n<li><code>config.exs</code> の <code>endpoint</code> はWebサーバーとアプリケーションの接続の境界部分.</li>\n</ul>\n</li>\n<li>\n<p><code>lib</code> ディレクトリ</p>\n<ul>\n<li>Supervision treeと,長く起動するプロセスが置かれる.（?,あってるか微妙）</li>\n<li>DBとのコネクションプールとかのような長く使われるものが置かれるっぽい.</li>\n</ul>\n</li>\n<li>\n<p><code>test</code> ディレクトリ</p>\n<ul>\n<li>名前の通りテストが置かれる.</li>\n</ul>\n</li>\n<li>\n<p><code>web</code> ディレクトリ</p>\n<ul>\n<li>Webアプリに必要な <code>model</code>, <code>view</code>, <code>template</code>, <code>controller</code> が置かれる.</li>\n</ul>\n</li>\n</ul>\n<h1>==============\nPlugについて</h1>\n<p>| <code>Plug</code> ライブラリは接続の統一化のために使われる.\n| <code>Plug</code> のリポジトリ <code>Plugリポジトリ</code>_ には以下のように書いてある.</p>\n<p>::</p>\n<pre><code>   ・ A specification for composable modules between web applications\n   ・ Connection adapters for different web servers in the Erlang VM\n</code></pre>\n<p>| なので,各機能のモジュールの仕様の記述と,Erlang VMと各Webサーバーとの接続をやってくれるみたいです.\n| （あまり理解してない感が）\n| 実際にPhoenixが作ってくれる物を見てみます. <code>config/endpoint.exs</code> を見てみます.</p>\n<p>.. code-block:: Elixir\n:linenos:</p>\n<pre><code>   defmodule Hello.Endpoint do\n     use Phoenix.Endpoint, otp_app: :hello\n\n     socket \\&quot;/socket\\&quot;, Hello.UserSocket\n\n     # Serve at \\&quot;/\\&quot; the static files from \\&quot;priv/static\\&quot; directory.\n     #\n     # You should set gzip to true if you are running phoenix.digest\n     # when deploying your static files in production.\n     plug Plug.Static,\n       at: \\&quot;/\\&quot;, from: :hello, gzip: false,\n       only: ~w(css fonts images js favicon.ico robots.txt)\n\n     # Code reloading can be explicitly enabled under the\n     # :code_reloader configuration of your endpoint.\n     if code_reloading? do\n       socket \\&quot;/phoenix/live_reload/socket\\&quot;, Phoenix.LiveReloader.Socket\n       plug Phoenix.LiveReloader\n       plug Phoenix.CodeReloader\n     end\n\n     plug Plug.RequestId\n     plug Plug.Logger\n\n     plug Plug.Parsers,\n       parsers: [:urlencoded, :multipart, :json],\n       pass: [\\&quot;*/*\\&quot;],\n       json_decoder: Poison\n\n     plug Plug.MethodOverride\n     plug Plug.Head\n\n     # The session will be stored in the cookie and signed,\n     # this means its contents can be read but not tampered with.\n     # Set :encryption_salt if you would also like to encrypt it.\n     plug Plug.Session,\n       store: :cookie,\n       key: \\&quot;_hello_key\\&quot;,\n       signing_salt: \\&quot;zzWE+Yw+\\&quot;\n\n     plug Hello.Router\n   end\n</code></pre>\n<p>| とりあえず <code>plug</code> ってのがいっぱい出てきています.\n| なんとなく見てると, <code>plug Plug.Static</code> で静的ファイルについての設定っぽいものが書いてあったり,\n| <code>plug Plug.Logger</code> とか, <code>plug Plug.Parsers</code> とかあったりして,Webアプリに必要な設定が書いてあるっぽいなと言う感覚です.\n| ココらへんの一連の <code>plug</code> は関数のパイプラインとして処理されるようです.\n|</p>\n<p>.. code-block:: Elixir\n:linenos:</p>\n<pre><code>   connection\n   |&gt; Plug.Static.call \n   |&gt; Plug.RequestId.call  \n   |&gt; Plug.Logger.call \n   |&gt; Plug.Parsers.call  \n   |&gt; Plug.MethodOverride.call\n   |&gt; Plug.Head.call  \n   |&gt; Plug.Session.call\n   |&gt; Hello.Router.call\n</code></pre>\n<p>| ソースに書いた順になってるっぽいです.Servletの設定順ミスってハマった思い出が…\n| ちなみに <code>endpoint</code> 自体も <code>plug</code> で,アプリケーション自体は <code>endpoint</code> で始まり <code>controller</code> で終わる一連のパイプラインらしい.</p>\n<h1>================\nRouterについて</h1>\n<p>| <code>web/router.ex</code> のソースを見ると,2つのパイプラインがあることがわかる.</p>\n<p>.. code-block:: Elixir\n:linenos:</p>\n<pre><code>   defmodule Hello.Router do\n     use Hello.Web, :router\n\n     pipeline :browser do\n       plug :accepts, [\\&quot;html\\&quot;]\n       plug :fetch_session\n       plug :fetch_flash\n       plug :protect_from_forgery\n       plug :put_secure_browser_headers\n     end\n\n     pipeline :api do\n       plug :accepts, [\\&quot;json\\&quot;]\n     end\n\n     scope \\&quot;/\\&quot;, Hello do\n       pipe_through :browser # Use the default browser stack\n\n       get \\&quot;/hello/:name\\&quot;, HelloController, :world\n       get \\&quot;/\\&quot;, PageController, :index\n     end\n\n     # Other scopes may use custom stacks.\n     # scope \\&quot;/api\\&quot;, Hello do\n     #   pipe_through :api\n     # end\n   end\n</code></pre>\n<ul>\n<li>\n<p><code>browser</code> パイプライン</p>\n<ul>\n<li>HTMLのみを受け付ける.</li>\n<li>セッション管理とか,フラッシュメッセージとか,セキュリティ対策とかを提供してくれるらしい.</li>\n</ul>\n</li>\n<li>\n<p><code>api</code> パイプライン</p>\n<ul>\n<li>基本的なJSON API用のパイプライン.JSONのみ受け付ける.</li>\n<li>XMLにしたいときとかはここ一箇所変更すれば全部変更される.</li>\n</ul>\n</li>\n</ul>\n<p>| <code>pipe_through</code> でどのパイプラインを使うか書く.\n| 処理の流れとしては接続を取得→パイプラインを呼び出し→コントローラーを呼び出し.\n| 呼び出し順を纏めると以下になる.</p>\n<p>.. code-block:: Elixir\n:linenos:</p>\n<pre><code>   connection\n   |&gt; endpoint\n   |&gt; router \n   |&gt; pipeline  \n   |&gt; controller\n</code></pre>\n<h1>==================\nまとめ</h1>\n<p>| 今回は,内部的な処理の流れとかおまじない的な部分が何をしてるかの勉強だった感じです.\n| 英語がヘタレ過ぎて自分が理解している意味とあってるか若干の不安が...</p>\n<h1>リンク</h1>\n<p>.. Plugリポジトリ link: https://github.com/elixir-lang/plug\n&quot;;</p>\n<pre><code> const TEST_DOC: &amp;str = &quot;About me\n</code></pre>\n<p>=================</p>\n<ul>\n<li>\n<p>名前</p>\n<ul>\n<li>y-fujiwara</li>\n<li>nuhera or zonuko (HN)</li>\n</ul>\n</li>\n<li>\n<p>経歴</p>\n<ul>\n<li>\n<p>千葉県の私立理系大学院修了(2015/3)</p>\n<ul>\n<li>数理計画の類をやってた。</li>\n<li>Pythonつかって色々やってた。</li>\n</ul>\n</li>\n<li>\n<p>都内のIT企業に就職(2015/4 ～ 今まで)</p>\n<ul>\n<li>メインはC++かC#かJava</li>\n<li>たまにRubyとかJavaScript</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Interests</h1>\n<ul>\n<li>\n<p>アニメ</p>\n<ul>\n<li>\n<p>SHOW BY ROCK!!</p>\n<ul>\n<li>2期円盤マラソン中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Game</p>\n<ul>\n<li>\n<p>STG どれも下手くそ</p>\n<ul>\n<li>レイストーム</li>\n<li>ダライアス外伝</li>\n</ul>\n</li>\n<li>\n<p>格闘ゲーム</p>\n<ul>\n<li>コンボゲーと呼ばれる物</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Music</p>\n<ul>\n<li>ゲームサントラ集め</li>\n</ul>\n</li>\n<li>\n<p>Technology</p>\n<ul>\n<li>\n<p>業務でつかった物</p>\n</li>\n<li>\n<p>Vim</p>\n<ul>\n<li>修行中</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n</li>\n<li>\n<p>Elixir</p>\n</li>\n<li>\n<p>Haskell,Rust</p>\n<ul>\n<li>勉強中・・・</li>\n</ul>\n</li>\n<li>\n<p>Elm</p>\n</li>\n<li>\n<p>線形代数</p>\n</li>\n<li>\n<p>プログラミング言語作成</p>\n<ul>\n<li>将来的に・・・</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>.. image:: /images/DSC_8445.JPG\n:alt: Quicksilver\n&quot;;</p>\n<pre><code> use super::*;\n\n #[test]\n fn rst_to_html() {\n   match render_rst(TEST_DOC, false) {\n     Ok(_) =&gt; (),\n     Err(e) =&gt; panic!(&quot;{:?}&quot;, JsValue::from(e).as_string().unwrap()),\n   }\n   assert!(true);\n }\n\n #[test]\n fn rst_to_html2() {\n   match render_rst(TEST_DOC2, false) {\n     Ok(_) =&gt; (),\n     Err(e) =&gt; panic!(&quot;{:?}&quot;, JsValue::from(e).as_string().unwrap()),\n   }\n   assert!(true);\n }\n</code></pre>\n<p>}</p>\n<p>テスト雑ですが、パーサーとかのエラーで落ちないかどうかだけが気になるのでエラーの場合はあえてpanicしてます。最初にビルドしたときにエラーになったシンタックスがいくつかあったのでそこらへんだけ担保したい感じです。</p>\n<p>deno側は単に即exportして終わりです。deno用にビルドされているだけで、非同期で読み込む必要があるなど、wasmの取り扱い方的には普通にwasm_bindgen使うときとそう変わらないです。</p>\n<p>.. code-block:: TypeScript</p>\n<p>export { instantiate } from &quot;./lib/rs_lib.generated.js&quot;;</p>\n<h1>============================================\n作ったライブラリをlumeのPluginにする</h1>\n<p>コード見てもらったほうが早いと思います。プラグインの作り方はlumeの公式サイトにあります。</p>\n<p>.. code-block:: TypeScript</p>\n<p>import type { Data, DeepPartial, Engine, Helper, Site } from &quot;lume/core.ts&quot;;\nimport { merge } from &quot;lume/core/utils.ts&quot;;\nimport loader from &quot;lume/core/loaders/text.ts&quot;;\nimport { instantiate } from &quot;./rst_render/lib.ts&quot;;</p>\n<p>export interface Options {\n/** The list of extensions this plugin applies to */\nextensions: string[];</p>\n<pre><code> /** To modify existing rules or new custom rules */\n // deno-lint-ignore no-explicit-any\n rules: Record&lt;string, (...args: any[]) =&gt; any&gt;;\n\n /** Set `true` append your plugins to the defaults */\n keepDefaultPlugins: boolean;\n</code></pre>\n<p>}</p>\n<p>// Default options\nexport const defaults: Options = {\nextensions: [&quot;.rst&quot;],\nrules: {},\nkeepDefaultPlugins: false,\n};</p>\n<p>/** Template engine to render Markdown files */\nexport class RstEngine implements Engine {\n#instance:\n| { render_rst: (rst: string, is_standalone: boolean) =&gt; string }\n| null;\nconstructor() {\nthis.#instance = null;\n}</p>\n<pre><code> async init() {\n   this.#instance = await instantiate();\n }\n\n deleteCache() {}\n\n render(\n   content: string,\n   _data?: Data,\n   _filename?: string,\n ): string {\n   if (!this.#instance) {\n     throw new Error(&quot;engine is not inited.&quot;);\n   }\n   return this.#instance.render_rst(content, true);\n }\n\n renderInline(content: string): string {\n   if (!this.#instance) {\n     throw new Error(&quot;engine is not inited.&quot;);\n   }\n\n   return this.#instance.render_rst(content, false);\n }\n\n renderSync(\n   content: unknown,\n   _data?: Data,\n   _filename?: string,\n ): string {\n   if (!this.#instance) {\n     throw new Error(&quot;engine is not inited.&quot;);\n   }\n\n   if (typeof content !== &quot;string&quot;) {\n     content = String(content);\n   }\n   return this.#instance.render_rst(content as string, true);\n }\n\n addHelper() {}\n</code></pre>\n<p>}</p>\n<p>export default function (userOptions?: DeepPartial<Options>) {\nconst options = merge(defaults, userOptions);</p>\n<pre><code> return async function (site: Site) {\n   const engine = new RstEngine();\n   await engine.init();\n   // pugやnunjucksを使ってテンプレート上にhtmlをレンダリングする場合はエンジンの登録が必須なのでやっておく\n   site.loadPages(options.extensions, loader, engine);\n\n   function filter(string: string, inline = false): string {\n     if (inline) {\n       return engine.renderInline(string?.toString() || &quot;&quot;).trim();\n     }\n     return engine.render(string?.toString() || &quot;&quot;).trim();\n   }\n\n   // Register the md filter\n   site.filter(&quot;rst&quot;, filter as Helper, true);\n };\n</code></pre>\n<p>}</p>\n<p>ポイントは以下です。</p>\n<ul>\n<li>\n<p>デフォルトエクスポートされる関数を一つ用意する</p>\n<ul>\n<li>引数はプラグインオプション</li>\n</ul>\n</li>\n<li>\n<p>上記関数はSiteオブジェクトを引数に取る関数をreturnする</p>\n</li>\n<li>\n<p>returnする関数の中でSiteオブジェクトに加工することでレンダリング等を制御できる</p>\n</li>\n</ul>\n<p>ちょいと微妙なのが最終的な関数がasyncな点です。戻り値が必要な関数ではないので、おそらく大丈夫とは思います。</p>\n<h1>============================================\n課題</h1>\n<p>すべてのrestructuredTextのシンタックスに対応しているわけではないです。\n番号付きリスト等に対応されていません。</p>\n<p><code>https://github.com/flying-sheep/rust-rst/blob/c2eace26cd421ab773f325264eaae0c4e15e932c/parser/src/rst.pest#L344 &lt;https://github.com/flying-sheep/rust-rst/blob/c2eace26cd421ab773f325264eaae0c4e15e932c/parser/src/rst.pest#L344&gt;</code>_ 等を見ると、コメントされていてまだ未対応なことがわかります。</p>\n<ul>\n<li>自分でforkして改造する</li>\n<li>自分でパーサーとか作る</li>\n<li>Pythonとかを無理やり読み込む(Sphinx直接使うので対応漏れとかがなさそう)</li>\n</ul>\n<p>等が考えられますが、今のところ対応してないものに気をつければ読めるものはできるので追々...ということで。</p>\n<h1>============================================\nまとめ</h1>\n<p>地味にブログのビルドとかもGitHub Actionsにしたりして書きやすくなったのでちょいちょい復活していきたいです。</p>\n<p>とはいえ会社でもブログ書いてるので分配に迷います...</p>",
      "date_published": "2022-10-21T00:12:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/clojure-crawler/",
      "url": "https://zonuko.github.io/posts/clojure-crawler/",
      "title": "Clojureで○○画像を集める",
      "content_html": "<p>Clojureで○○画像を集める\n################################</p>\n<p>昔、と言っても一年弱ほど前ですがPythonで画像集めしたことがあって、\nClojureではどうやるんだろうと思ってやってみました。</p>\n<h1>==================================\n使ったもの</h1>\n<ul>\n<li>\n<p>Enlive</p>\n<ul>\n<li>テンプレートライブラリっぽいですが、 <code>BeautifulSoup</code> みたいなことするにはどうしようかとググったら出てきたので使いました。</li>\n</ul>\n</li>\n</ul>\n<h1>==================================\nソース</h1>\n<p>そんなに大きいソースでも無いのでいきなり貼っちゃいます。</p>\n<p>.. code-block:: clojure</p>\n<p>(ns crawler.core\n(:require [net.cgrand.enlive-html :as enlive]\n[clojure.edn :as edn]\n[ring.util.codec :refer [url-encode]]\n[clojure.java.io :refer [copy input-stream output-stream]]))</p>\n<p>;; ここで999エラーが帰ってくる可能性がある\n;; yahooは1時間に400回まで\n(defn get-contents [uri]\n(-&gt; (java.net.URI. uri)\nenlive/html-resource))</p>\n<p>;; ダウンロードのURL接続は直接もとのサイトに行っているならアクセス制限にかからないはず\n(defn download [{{src :href} :attrs} path]\n(let [bytes (java.io.ByteArrayOutputStream.)]\n(with-open [pic (input-stream src)\nout (output-stream path)]\n(copy pic bytes) ;; URLからメモリにロード\n(.write out (.toByteArray bytes)))))</p>\n<p>(defn get-by-tagname [uri &amp; tags]\n(let [pics (-&gt; uri\nget-contents\n(enlive/select tags))]\n(if (zero? (count pics))\nnil\npics)))</p>\n<p>(defn run []\n(let [config (edn/read-string (slurp &quot;config.edn&quot;))\norg-word (get config &quot;word&quot;)\nwords (reduce #(str %1 &quot;+&quot; %2) (first org-word) (rest org-word))\nword (url-encode words)\norg-url (get config &quot;url&quot;)\ndir (get config &quot;dir&quot;)\nb (get config &quot;page&quot;)\nstep (get config &quot;step&quot;)]\n(loop [page 1\nmax 1\nurl (format org-url word b)]\n(if-let [pics (get-by-tagname url :div#ISm :div.gridmodule :div.SeR :p.tb :a)]\n(do\n(doseq [[pic names] (map (fn [p idx] [p idx]) pics (take 20 (iterate inc max)))]\n(download pic (str dir words &quot;-&quot; names &quot;.png&quot;)))\n(Thread/sleep 10000) ;; 10秒間スリープ\n(recur (inc page) (inc (* page step 10)) (format org-url word (inc (* page step 10)))))\nnil))))</p>\n<p><code>run</code> 関数が大きくなっちゃってるのが気になる。</p>\n<p>基本的にはyahoo画像検索の簡易検索から持ってくることにしてます。\n単純にURLのクエリにページ情報とかが含まれているのでクロールしやすいってだけです。</p>\n<p>また、設定ファイルを <code>config.edn</code> として外出しています。</p>\n<p>.. code-block:: clojure</p>\n<p>{&quot;url&quot; &quot;https://search.yahoo.co.jp/image/search?p=%s&amp;ei=UTF-8&amp;b=%s&quot;\n&quot;word&quot; [&quot;呪怨&quot;]\n&quot;page&quot; 1\n&quot;dir&quot; &quot;pic/&quot;\n&quot;step&quot; 2}</p>\n<p>保存先のフォルダとか検索語リストだとかを入れてます。1ページ20件と決まっているならstepは不要だったかも。</p>\n<p>実際動かしてみると呪怨画像が溜まっているのがわかります。</p>\n<p>.. image:: /images/Crawler.gif\n:alt: Crawler</p>\n<h1>==================================\nまとめ</h1>\n<p>yahoo画像検索ではエロ画像は取得できない!</p>",
      "date_published": "2018-06-12T22:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/job-change/",
      "url": "https://zonuko.github.io/posts/job-change/",
      "title": "そろそろ誕生日だし転職活動しようと思う",
      "content_html": "<p>そろそろ誕生日だし転職活動しようと思う\n##########################################################</p>\n<p>表題の通りです。考えていることととか、何したいかとかつらつらまとめようと思います。\n自分の頭の中の整理も兼ねてます。\nもし今の会社の人が見てたらお目溢しを・・・</p>\n<p>また、簡単な経歴とかは <code>過去のブログ &lt;https://zonuko.github.io/posts/2018/05/25/inventory&gt;</code>_ とか <code>About &lt;https://zonuko.github.io/pages/about.html&gt;</code>_\nとか見てもらえれば良いと思います。</p>\n<h1>=================\n動機</h1>\n<p>大きい動機は以下の2つくらいです。</p>\n<ul>\n<li>\n<p>好きなプログラミング言語でお仕事したい</p>\n<ul>\n<li>\n<p>プログラミング言語自体が好き</p>\n<ul>\n<li>プログラミング言語を勉強するとその時の社会が困っている問題が見えると思っています</li>\n</ul>\n</li>\n<li>\n<p>個人的な趣味は関数型言語だったが多分今のままだと一生チャンス無いと思った</p>\n</li>\n<li>\n<p>また、一つの言語に精通したかったがそれも難しそうだった</p>\n<ul>\n<li>どんな言語でも精通すると他への使い回しが効くことは、ちょっと長くやった言語でも実感してます</li>\n</ul>\n</li>\n<li>\n<p>今の一番は <code>Clojure</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>30歳になる前に違う世界に行きたい</p>\n<ul>\n<li>\n<p>別に今の場所がだめとか言うつもりはなくて、今後60過ぎまでエンジニアやるとして一箇所しか知らないのは怖いと思った</p>\n<ul>\n<li>なんで怖いと思うんだろうと思ったけど、やっぱり自分が40とかになっても今の会社にいると思えないからな気がする</li>\n<li>まぁそのときになってあーだこーだやるのは怖いよねって感じかも</li>\n</ul>\n</li>\n<li>\n<p>30すぎると何かが減る気がした</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>まとめるとこの先ずっとプログラマとしてやっていきたいってのが根底にある気がします。</p>\n<p>結局自分が楽しいことを仕事としてやり続けたいってところかなと。</p>\n<h1>=================\n出来ること</h1>\n<ul>\n<li>\n<p>技術周り</p>\n<ul>\n<li>\n<p>Webアプリはそれなりに経験あります</p>\n<ul>\n<li>\n<p>悲しいことに障害対応の経験もあります</p>\n</li>\n<li>\n<p>SPAもどきは良く作ってました</p>\n<ul>\n<li>セキュリティをサーバー側に任せたいときだけ普通にレンダリング噛ますとか</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>業務で使ってた言語はC#,Ruby(Rails),TypeScript,JavaScript</p>\n<ul>\n<li>一番長いのがTypeScriptでついでC#とRubyって感じですかね</li>\n<li>代表的なのだけで、他にもほそぼそと使ってたものはあります。そこら編は上に張ったURLで</li>\n</ul>\n</li>\n<li>\n<p>趣味ではClojure,Elixirあたり</p>\n<ul>\n<li>Clojureが一番気に入ってるし、何かと手を動かしてたやつだと思います</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>技術以外</p>\n<ul>\n<li>\n<p>設計から実装まで</p>\n<ul>\n<li>見積もりとかもしてました</li>\n</ul>\n</li>\n<li>\n<p>PL</p>\n<ul>\n<li>\n<p>何故か下に新人がつくことが多かったので立場的にはPLやってることが結構有りました</p>\n<ul>\n<li>ただ、開発状況の管理とか、技術面のリーダーみたいなことをしてることのほうが多かったかなと</li>\n<li>お客様との金銭の相談とかは直接はしてないです</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>=================\n方針</h1>\n<p>まずは以下の方針で行こうかなぁと</p>\n<ul>\n<li>\n<p>遅くても9月までには終わらせる。早ければ早いほどよいと思っています</p>\n<ul>\n<li>諦めるって選択含めてです</li>\n</ul>\n</li>\n<li>\n<p>企業の探し方はプログラミング言語言語ありき</p>\n<ul>\n<li>\n<p>Clojure,Python,Elixirって感じの趣味なのでその順で探そうと思います</p>\n<ul>\n<li>\n<p>経験を活かすと言うよりもっと難しいこととかやったこと無いことや好きなことしたいって感じですかね</p>\n</li>\n<li>\n<p>Rustとかも興味はありますが少なくとも上に上げた言語よりは勉強不足です</p>\n</li>\n<li>\n<p>以下を参考に</p>\n<ul>\n<li>Clojureは <code>これ &lt;https://github.com/athos/japanese-clojure-companies&gt;</code>_</li>\n<li>Elixirは <code>こっち &lt;https://github.com/voluntas/japanese-erlang-elixir-companies&gt;</code>_</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>次に作っているものって感じです</p>\n</li>\n<li>\n<p>ただし、派遣があまり好きではないのでそこら辺は最初から度外視します</p>\n<ul>\n<li>自然に自社開発か受託に</li>\n</ul>\n</li>\n<li>\n<p>toBかtoCもあまり気にしてません</p>\n</li>\n<li>\n<p>強いていえばWebアプリ系の方が経験あるのでそこら辺中心にって感じでしょうか</p>\n</li>\n</ul>\n</li>\n<li>\n<p>年収は500前後くらいで</p>\n<ul>\n<li>単純に今交通費とかボーナス全部含めた総支給で420くらいあったので</li>\n<li>正直年収も今とあまり変わらないのであればそんなにこだわりがないです。もらえる分には貰いたいですが。</li>\n</ul>\n</li>\n<li>\n<p>とりあえず都内で</p>\n<ul>\n<li>\n<p>立地は北海道から沖縄までどこでもいいんですが、一年前に引っ越したんでもうちょっと関東にいたいなと。</p>\n<ul>\n<li>東京で働きたいみたいな思想とかまだ消耗してるのみたいな思想はないです。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>エージェントを使うつもりは無し</p>\n<ul>\n<li>普通に転職サイトか企業の採用ページから行こうと思います</li>\n<li>最近流行りのTwitterはどうしようか迷ってます。一回だけつぶやいて何もなければ終わりって感じが妥当かも</li>\n</ul>\n</li>\n</ul>\n<h1>=================\n不安</h1>\n<p>不安と言うか上記を目指す上での見えてる懸念ですかね</p>\n<ul>\n<li>\n<p>やりたいことに対する実力不足感</p>\n<ul>\n<li>\n<p>Clojure,Python,Elixirは個人的に勉強はしてたが仕事で使ってない</p>\n<ul>\n<li>\n<p>本当に知見が貯まるときって仕事で使ってハマったりするときだと思うんですよね</p>\n<ul>\n<li>単純に8時間同じ言語でプログラミング出来るかどうかの違いな気もする</li>\n</ul>\n</li>\n<li>\n<p>一応作ったものはある</p>\n</li>\n</ul>\n</li>\n<li>\n<p>これに関しては自分の関心度とかモチベーションを見てもらうようにするしか無いと思う</p>\n<ul>\n<li>一応知らないことをモノにするのは自信があるのでそこら辺のアピール次第かも</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>その他の知識不足感</p>\n<ul>\n<li>代表的なアルゴリズムは少し実装してみたりしてるんですが、昔やったやつだと覚えてなかったり</li>\n<li>コンピューターサイエンス系の知識は大学の時やってたもだいぶ忘れてきている気がする</li>\n</ul>\n</li>\n</ul>\n<h1>=================\nまとめ</h1>\n<p>このページはちょくちょく編集していこうと思います。</p>\n<p>転職活動するので見た人はよろしゅうお願いします。</p>\n<p>拾ってやってもいいよって奇特な人もよろしくおねがいします。</p>",
      "date_published": "2018-05-30T23:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/professional-clojure1/",
      "url": "https://zonuko.github.io/posts/professional-clojure1/",
      "title": "Professional Clojureメモその1",
      "content_html": "<p>Professional Clojureメモその1\n################################</p>\n<p>Profession Clojureって本を買ったのでメモしていこうと思います。</p>\n<p>.. raw:: html</p>\n   <div class=\"kaerebalink-box\" style=\"text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;\"><div class=\"kaerebalink-image\" style=\"float:left;margin:0 15px 10px 0;\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B01G7S4SGK/zonuko-22/\" target=\"_blank\" ><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51PAVy95uvL._SL160_.jpg\" style=\"border: none;\" /></a></div><div class=\"kaerebalink-info\" style=\"line-height:120%;/zoom: 1;overflow: hidden;\"><div class=\"kaerebalink-name\" style=\"margin-bottom:10px;line-height:120%\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B01G7S4SGK/zonuko-22/\" target=\"_blank\" >Professional Clojure</a><div class=\"kaerebalink-powered-date\" style=\"font-size:8pt;margin-top:5px;font-family:verdana;line-height:120%\">posted with <a href=\"http://kaereba.com/\" rel=\"nofollow\" target=\"_blank\">カエレバ</a></div></div><div class=\"kaerebalink-detail\" style=\"margin-bottom:5px;\">Jeremy Anderson,Michael Gaare,Justin Holguín,Nick Bailey,Timothy Pratley Wrox 2016-05-25    </div><div class=\"kaerebalink-link1\" style=\"margin-top:10px;\"></div></div><div class=\"booklink-footer\" style=\"clear: left\"></div></div>\n<p>ちなみに章ごとです。今回は第1章です。</p>\n<p>第1章ではClojureの関数型の部分についてJavaと比較するような形で書かれています。\n最初は細かく書こうと思ったんですが、思ったよりボリューム満点だったので適当にClojureの部分だけ要約します。</p>\n<h1>============================================\n再帰</h1>\n<p>Programming Clojureとか読んでると今更な感もあるんですが、触れられていました。</p>\n<p>通常の再帰ではスタックがあふれるので、 <code>recur</code> を使って末尾再帰します。 ただし、 JVMは末尾呼び出し最適化をサポートしてないのでシュミレートしているだけのようです。('tail call optimazation'とあったので末尾呼び出し最適化としておきます。)</p>\n<p>.. code-block:: Clojure</p>\n<p>(defn factorial2 [n]\n(loop [count n acc 1]\n(if (zero? count)\nacc\n(recur (dec count) (* acc count)))))</p>\n<p>相互再帰は <code>trampoline</code> でやる感じです。ただし、サンプルでは普通の相互再帰と、 <code>letfn</code> でローカルに関数を2つ作ってそれを相互再帰する方も紹介されていました。\n普通に相互再帰すると関数呼び出しが <code>trampoline</code> 付きでの呼び出しになるのが普通に関数呼び出せば良くなるのがメリットみたいです。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; 使うときはtrampolineなしで普通に呼べば良い\n(defn my-even? [n]\n(letfn [(e? [n] (if (zero? n) true #(o? (dec n))))\n(o? [n] (if (zero? n) false #(e? (dec n))))]\n(trampoline e? n)))</p>\n<p>;; trampolineはmy-evenの中に閉じ込められているのでそのまま使える\n(defn my-odd? [n]\n(not (my-even? n)))</p>\n<h1>============================================\n高階関数</h1>\n<p>特に発見とかもなかったです。 <code>filter</code> の例が出ていました。</p>\n<p>.. code-block:: Clojure</p>\n<p>(def lst [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;])\n(filter #(= &quot;a&quot; %) lst)</p>\n<p>それ以外にもコマンドパターンの比較があったりしました。</p>\n<h1>============================================\n部分適用と合成関数</h1>\n<p><code>partial</code> を使った部分適用について触れられています。\n部分適用とかカリー化とか誤用の元なので触れるのに勇気がいる・・・</p>\n<p>.. code-block:: Clojure</p>\n<p>(def twice (partial * 2))\n(map twice [1 2 3 4 5])</p>\n<p>関数の合成の方は <code>comp</code> で出来ます。評価順は右から左って感じです。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; 2足してから2倍する\n(map (comp (partial * 2) (partial + 2)) [1 2 3 4 5])</p>\n<h1>============================================\n遅延評価</h1>\n<p>もっと使わないと全然理解が甘い気がしてて恐縮ですが、\n<code>map</code> とかでも <code>lazy sequence</code> を返してくる点が触れられています。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; lazy-cat全く覚えてなかった\n;; 素朴な使い方\n(lazy-cat [1 2 3] [4 5 6])</p>\n<p>;; フィボナッチ ただしプログラミングClojureで紹介されている良くないパターン\n;; map以下では自分自身が常に変更されて計算されていくイメージ\n;; [1 1]のときはmapの引数は[1] [1]となり、2が計算される\n;; 2が分かると[1 1 2]となり[1 1 2]と[1 2]となり3が計算される\n;; 3が分かると[1 1 2 3]となり[1 1 2 3]と[1 2 3]となり5が計算される\n;; 以下無限に続くものがmapの引数となるリスト\n(def fib-seq\n(lazy-cat [1 1] (map + (rest fib-seq) fib-seq)))</p>\n<h1>============================================\n変更可能な仲間</h1>\n<h1>Atom</h1>\n<p>最もシンプルな変更可能な値。協調動作を行わない前提だったり、独立した値に使えるっぽいです。\n一度に複数変更しない場合にのみ使う感じです。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; そのまま表示すると#atom[{} 0x755e4715]って感じでセットした値とハッシュ値のセットになる\n(def app-state (atom {}))\n;; swap!で更新する。第二引数の関数をその後の引数を使って実行する\n;; #atom[{:current-user &quot;Jeremy&quot;} 0x755e4715]な感じ\n(swap! app-state assoc :current-user &quot;Jeremy&quot;)\n;; 直接上書き更新する場合はreset!\n;; #atom[{:aaa 1} 0x755e4715]\n(reset! app-state {:aaa 1})\n;; derefか@で中身を取得\n(:aaa @app-state)</p>\n<h1>Ref</h1>\n<p>複数値の変更に使うやつです。いわゆるトランザクション。\nここらへんプログラミングClojureにもあったんですが要復習。</p>\n<p><code>atom</code> との比較は割愛</p>\n<p>.. code-block:: Clojure</p>\n<p>;; refの定義方法はatomと似た感じ\n(def checking (ref {:balance 500}))\n;; 協調動作実験用にもう一つ\n(def savings (ref {:balance 250}))</p>\n<p>;; dosyncで協調動作\n;; throwされると最初のcommuteは巻き戻される\n;; 更新自体はalterも存在し、こっちは実行順が保証される\n(dosync\n(commute checking assoc :balance 700)\n(throw (Exception. &quot;Oops...&quot;))\n(commute savings assoc :balance 50))</p>\n<h1>============================================\nNilの扱い</h1>\n<p>Nil Punningって日本語にするとどういう感じなんだろう？上手い翻訳が出てこない・・・</p>\n<p>.. code-block:: Clojure</p>\n<p>;; nilはfalsy\n(if nil &quot;true&quot; &quot;false&quot;)</p>\n<p>;; firstとかみたいに配列の類いを渡すこと前提にしているものはnil渡すとnilを返す\n;; 単純に想定されているものが来てないので最初の要素とかが無いので\n(first nil) ;; =&gt; nil\n(second nil) ;; =&gt; nil\n(seq? nil) ;; =&gt; false</p>\n<p>;; 空のリストとかとはnilは違う\n(if '() &quot;true&quot; &quot;false&quot;) ;; =&gt; &quot;true&quot;</p>\n<p>;; falsyな値としてnilを扱っているのかnilとしてnilを使っているのか要注意\n;; 以下の例はmapを扱う場合にValueとしてnilがあるとKeyが存在しないときに帰ってくるnilを判別が出来ない例\n(:foo {:foo nil :bar &quot;baz&quot;}) ;; =&gt; nil\n(:fooo {:foo nil :bar &quot;baz&quot;}) ;; =&gt; nil\n;; mapはデフォルト値を指定できるのでKeyが無いときはそっちがいい\n(:fooo {:foo nil :bar &quot;baz&quot;} :not-found) ;; =&gt; :not-found</p>\n<p><code>(first 1)</code> はなんでnilじゃないんだろう？</p>\n<h1>============================================\nオブジェクト指向っぽいやつ</h1>\n<p>オーバーロードっぽいディスパッチは <code>defmulti</code> のマルチメソッドでできる</p>\n<p>.. code-block:: Clojure</p>\n<p>;; 第一引数に与えられた何某かで実際に呼び出されるメソッドが決まる\n(defmulti area (fn [shape &amp; _] shape))</p>\n<p>;; １つ目が:triangleの場合\n(defmethod area :triangle\n[_ base height]\n(/ (* base height) 2))</p>\n<p>;; :sqareの場合\n(defmethod area :square\n[_ side]\n(* side side))</p>\n<p>;; :rectの場合\n(defmethod area :rect\n[_length width]\n(* length width))</p>\n<p>;; :circleの場合\n(defmethod area :circle\n[_ radius]\n(* radius radius Math/PI))</p>\n<p>オーバーロードと違ってオブジェクトに紐づくようなメソッドではなく、\n特定の条件から実際の関数がディスパッチされる単なる関数群という感じでしょうか</p>\n<h1>クラスっぽいやつ</h1>\n<p><code>deftype</code> とか <code>defrecord</code> でクラスが作れる。\n<code>defrecord</code> の方は普通の連想配列のようにも振る舞える</p>\n<p>.. code-block:: Clojure</p>\n<p>(deftype hogehoge [hoge])\n(def h (hogehoge. 100))\n(.hoge h) ;; =&gt; 100\n(:hoge h) ;; =&gt; nil</p>\n<p>(defrecord foo [bar])\n(def f (foo. 100))\n(.bar f) ;; =&gt; 100\n(:bar f) ;; =&gt; 100</p>\n<h1>インターフェースぽいやつ</h1>\n<p><code>interface</code> っぽいやつとして <code>defprotocol</code> が紹介されていました。</p>\n<p>.. code-block:: Clojure</p>\n<p>(defprotocol Shape\n(area [this])\n(perimeter [this]))</p>\n<p>(defrecord React [width length]\nShape ;; Shapeプロトコルを実装\n(area [this] (* (:width this) (:length this)))\n(perimeter [this] (+ (* 2 (:width this)) (* 2 (:length this)))))</p>\n<p>どちらかというとtraitとかに近いのかも？traitの方はちょっとかじった程度ですが。</p>\n<p><code>defrecord</code> や <code>deftype</code> したくないけど特定の <code>Var</code> になにか処理を付け加えたいとき用に <code>reify</code> があるっぽいです。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; recordやtypeではない単なるVarにprotocolを実装させる\n(def some-shape\n(reify Shape\n(area [this] &quot;Area&quot;)\n(perimeter [this] &quot;I calculate perimeter&quot;)))</p>\n<h1>============================================\nその他</h1>\n<p>データの永続性についてとかを木構造を作って紹介されてましたがブログでは割愛します。</p>\n<p>また、マクロの紹介として <code>defroutes</code> とかが紹介されていました。\nマクロ自体の説明ではなくて何が出来るかとかそういう話です。</p>\n<h1>============================================\nまとめ</h1>\n<ul>\n<li>ほとんど復習でしたが、 <code>trampoline</code> の使い方とか参考になりました。</li>\n<li><code>honeysql</code> とか紹介されてたのでそのうち使ってみたいです</li>\n</ul>",
      "date_published": "2018-05-27T23:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/inventory/",
      "url": "https://zonuko.github.io/posts/inventory/",
      "title": "社会に出て3年間でやってたこと",
      "content_html": "<p>社会に出て3年間でやってたこと\n######################################################</p>\n<p>題名の通りなんですが、まとめてみます。Twitterとかで個人的に勉強したことは出してても、\n業務のために勉強した事とか出してなかったので、まとめておこうと思います。</p>\n<p>ただし、実際に何作ったかとかは結構パブリックな感じでは出せないものがあるので技術とか個人的な勉強とかだけにしとこうと思います。</p>\n<h1>============================================\nお仕事で使ったもの(順不同)</h1>\n<ul>\n<li>\n<p>React.js(2年くらい？)</p>\n<ul>\n<li>\n<p>WebGIS絡みのプロジェクトで利用</p>\n</li>\n<li>\n<p>Fluxの類は入れなかったので苦労する面もあった</p>\n<ul>\n<li>バケツリレーはやっぱり誰でも悩むんだなぁとか</li>\n<li>ただ、色々合って入れなくてよかったなと思う面もあるので一長一短</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>TypeScript(2年強)</p>\n<ul>\n<li>\n<p>React.jsかVue.jsと組わせて使ってた</p>\n</li>\n<li>\n<p>個人的にはかなり好き</p>\n<ul>\n<li>C#っぽい書きっぷりとか、型の柔軟性とか</li>\n<li>事前にF#とか関数型勉強してた事もあって型については結構調べてても楽しかったです。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Vue.js(半年弱くらい)</p>\n<ul>\n<li>\n<p>React.jsのあとに使いました。結構好きです。</p>\n</li>\n<li>\n<p>Angularも短期間ですがやってましたが、ReactとAngularの間くらいの感じで結構好きです</p>\n<ul>\n<li>用意されている機能もちょうどいい塩梅だと感じてます</li>\n<li>FluxなしのReactほどカオスにならず、Angularほど大掛かりでも無い印象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Angular(一週間くらい)</p>\n<ul>\n<li>\n<p>めちゃくちゃ突発で、直前に言われて2日で勉強してくるみたいな無理をしたやつです</p>\n</li>\n<li>\n<p>結構大掛かりな感じなフレームワークだなという印象</p>\n<ul>\n<li>双方向バインディング人類には早くない？とか</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>C#(2.5年くらい？)</p>\n<ul>\n<li>\n<p>DLLの作成からASP.NET MVCでのWebアプリ作成まで色々使いました</p>\n<ul>\n<li>CLI使って結構頑張るとC++と連携とか色々出来て楽しいです</li>\n</ul>\n</li>\n<li>\n<p>言語としてはかなりいい出来だと思ってます。LINQがかなり良いです</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Java(合計すると半年くらい？)</p>\n<ul>\n<li>主にWebアプリで利用</li>\n<li>PlayFrameworkとかSpringFrameworkとセットで使ってます</li>\n<li>C#のあとに触れたので色々違和感が・・・</li>\n</ul>\n</li>\n<li>\n<p>C++(これも合計で半年くらい？)</p>\n<ul>\n<li>デスクトップアプリ作るのに使ってました</li>\n<li>dll、libとかかなり複雑でした。libに二種類あるとか最初はめっちゃ混乱</li>\n<li>ガッツリオブジェクト指向で作られているプロジェクトでデザインパターンを積極的に入れていることを売りにしているプロジェクトだったので、\nOOPに関しての知見とか知識は勉強させてもらいました</li>\n</ul>\n</li>\n<li>\n<p>Ruby(1年弱)</p>\n<ul>\n<li>Railsと一緒に使ってました</li>\n<li>PHPから移行したプロジェクトで結構苦労しました</li>\n<li>動的型付け + OOPはちゃんと作らないとカオスだと言うことを学んでしまった・・・</li>\n</ul>\n</li>\n<li>\n<p>Python(1年くらい)</p>\n<ul>\n<li>正確に言うと社会に出てからの物ではないです</li>\n<li>大学院の研究でアルゴリズムの検証とか実験に使ってました</li>\n<li>言語としてはかなり好きな方です。押し付けてくるシンタックスとか仕様が割りと好きです</li>\n<li>あとは社内のお遊びプロジェクトで画像を集めるのに使ったりとか</li>\n<li>1,2を争うぐらい好きな言語。プログラミングの楽しさを教えてくれた言語です</li>\n</ul>\n</li>\n<li>\n<p>その他(めっちゃ短期間だけ触ったもの。細かい説明は割愛)</p>\n<ul>\n<li>PHP</li>\n<li>Go</li>\n<li>C</li>\n</ul>\n</li>\n</ul>\n<h1>============================================\n個人的な勉強</h1>\n<ul>\n<li>\n<p>Clojure(勉強開始からだと半年ちょい？)</p>\n<ul>\n<li>\n<p>最初はLISP系言語敬遠してたんですが、全く違う物勉強したくなって触りました</p>\n</li>\n<li>\n<p>Pythonと同じくらい好きです</p>\n<ul>\n<li>\n<p>好きな理由が上手く言えない。なんとなく言語の思想を押し付けてくるところだとは思ってますが</p>\n<ul>\n<li>Simple Made Easyだとか、連想配列の分配束縛とか辺りにそういうの感じてるのかなぁとか思います</li>\n<li><code>シンプルさの必要性 &lt;http://eed3si9n.com/ja/simplicity-matters&gt;</code>_ とかは結構読み返しました</li>\n</ul>\n</li>\n<li>\n<p>シンタックスレベルで思想を押し付けてくるのはPythonとも若干共通している気がしなくもないです。Clojureのほうが柔軟だとは思いますが</p>\n</li>\n</ul>\n</li>\n<li>\n<p>作ったものは過去のブログ参照ってことで</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Elixir</p>\n<ul>\n<li>\n<p>これ自体は出たばっかりの頃にインストールだけしてみたりしてたものです。多分学生時代です</p>\n</li>\n<li>\n<p>社会に出てちょっとしてセミナーとかで見かけたのでちょっと真面目にやってみるかって思ってやってみた感じです</p>\n<ul>\n<li>Programming ElixirとProgramming Phoenixとか読んでました</li>\n<li>Programming Phoenixについて過去のブログ参照です</li>\n</ul>\n</li>\n<li>\n<p>アクターモデルとかについては勉強になりました。並行処理とか余りちゃんと勉強してなかったんですが勉強になります</p>\n</li>\n<li>\n<p>シンタックスがRuby風味なのは今となっては正直余り好きではないです</p>\n</li>\n<li>\n<p>https://bitbucket.org/y_fujiwara/elixir-tutorial/src/default/</p>\n</li>\n<li>\n<p>https://bitbucket.org/y_fujiwara/programming-phoenix/src/master/</p>\n</li>\n<li>\n<p>https://gitlab.com/y-fujiwara/gemini</p>\n<ul>\n<li>Phoenix、TS、React、Fluxでチャット作ろうとしてガワだけ作って止まっちゃってるやつ</li>\n<li>結局チャット自体はClojureの方で満足してしまっている・・・</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>その他(チュートリアル程度だったり、本一冊読んだ程度だったり)</p>\n<ul>\n<li>\n<p>F#</p>\n<ul>\n<li>プログラミングの基礎がOCamlで書いてあったのでF#でもイケるっしょって思ってやってました</li>\n<li>言語自体は結構好きでしたが、何故か余り深入りしませんでした</li>\n<li>実践 F# 関数型プログラミング入門とかも取り寄せして読んだりしてました。再販してほしい</li>\n<li>https://bitbucket.org/y_fujiwara/metro-network/src/master/</li>\n</ul>\n</li>\n<li>\n<p>Rust</p>\n<ul>\n<li>\n<p>完全にチュートリアルしかやってません</p>\n<ul>\n<li>C++の経験だけ合ったので比較対象としてはかなり有意義でした</li>\n<li>所有権とか余り意識してなかったのでそこら辺は勉強になりました</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Elm</p>\n<ul>\n<li>これもチュートリアルだけです</li>\n<li>正直難しかったです。Haskellあまり習得もしてないので尚更</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>============================================\nその他読んでよかった本とか</h1>\n<ul>\n<li>\n<p>プログラミン言語の基礎概念</p>\n<ul>\n<li>https://bitbucket.org/y_fujiwara/copl/src/master/</li>\n<li>途中までやって力尽きたリポジトリ</li>\n</ul>\n</li>\n<li>\n<p>カイゼンジャーニー</p>\n</li>\n<li>\n<p>なぜオブジェクト指向で作るのか</p>\n</li>\n<li>\n<p>プロになるためのWeb技術入門</p>\n</li>\n<li>\n<p>シングルページWebアプリケーション</p>\n</li>\n<li>\n<p>JavaScript: the Good Parts</p>\n<ul>\n<li>上の二冊はクライアント側実装するときに勉強した本。個人的にはバイブル</li>\n</ul>\n</li>\n<li>\n<p>etc...</p>\n</li>\n</ul>\n<h1>============================================\nまとめ</h1>\n<p>個人的な好き嫌いで言うと Clojure = Python &gt; TypeScript &gt; C# &gt; Ruby &gt; Java って感じですかね。</p>\n<p>まとめてみると色々触ってるなぁと思います。なんかWebクライアントサイド結構やっているように思われがちな気がしてます。\n向き不向きは置いておいて、正直いうと余りクライアント側好みではないです。</p>\n<p>今と言うか今後しばらくClojureやっていると思います。最近色々考えなきゃなぁと思うこともあるのでうごいていこうかなとか。\nなんか3年も立つと1年目のときには考えもしなかったこと考えてしまうなと感慨深い今日このごろです。</p>",
      "date_published": "2018-05-25T00:12:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/clojure-web3/",
      "url": "https://zonuko.github.io/posts/clojure-web3/",
      "title": "ClojureでWebアプリ続きの続き(外部APIと連携するchannel)",
      "content_html": "<p>ClojureでWebアプリ続きの続き(外部APIと連携するchannel)\n#######################################################</p>\n<p>真面目に前回で終わりだと思ってたんですが、 <code>core.async</code> とか調べている内に意欲が・・・</p>\n<p>今回はWolfram Alphaって言う質問応答サービスを利用してチャットにQAを組み込みます。\n結構前に書いてたProgramming Phoenixで最後の方にやってたやつと似たような感じです。</p>\n<h1>============================================\n導入</h1>\n<p>今回は以下を使いました。</p>\n<ul>\n<li>\n<p><code>[com.stuartsierra/component &quot;0.3.2&quot;]</code></p>\n<ul>\n<li><code>sente</code> のソケットとAPI問い合わせ用の <code>channel</code> を管理するためです。ついでに使ってみようってことで。</li>\n</ul>\n</li>\n</ul>\n<p>また、チャットにて@wolframが最初についているものを対象リクエストとみなします。</p>\n<h1>============================================\n問い合わせ部分の本体実装</h1>\n<p><code>channel</code> で待ち受けてAPIに問い合わせるだけです。</p>\n<p>.. code-block:: Clojure</p>\n<p>(ns earth-clj.wolfram\n(:require [clojure.core.async :refer [go-loop &lt;! &gt;!]]\n[ring.util.codec :as codec]\n[earth-clj.socket :refer [ch-chsk]]\n[clojure.xml :as xml]\n[clojure.zip :as zip]))</p>\n<p>;; TODO: pipeとかpipelineを使ってch-chskとwolfram-chをつなげる</p>\n<p>(defonce ^:private app-id &quot;XXXXX-XXXXXXXXX&quot;)</p>\n<p>(defn- make-url [input]\n(println input)\n(str &quot;http://api.wolframalpha.com/v2/query?appid=&quot;\napp-id\n&quot;&amp;input=&quot;\n(codec/url-encode input)\n&quot;&amp;format=plaintext&quot;))</p>\n<p>(defn- xml-&gt;data [input]\n(some-&gt; input\nmake-url\nxml/parse\nzip/xml-zip\nzip/down\nzip/right\nzip/down\nzip/down\nzip/down\nfirst))</p>\n<p>(defn start-wolfram-service [wolfram-ch]\n(go-loop []\n(when-let [{:as ev-msg :keys [ring-req ?data]} (&lt;! wolfram-ch)]\n(&gt;! (:reader ring-req) (assoc ev-msg :?data\n(if-let [ans (xml-&gt;data ?data)]\nans\n&quot;I have no idea.&quot;)))\n(recur))))</p>\n<p><code>go-loop</code> で待ち受けて何か来たらWolfram Aplhaからxmlもらってくる感じです。\n<code>some-&gt;</code> とか初めて使いました。\nデータが取得出来たらDB登録用の <code>channel</code> にデータを突っ込みます。</p>\n<p>また、 <code>xml-zip</code> 使うと木構造みたいな感じにしてくれるのであとは適当に探索すればよかったので\nそれなりに楽でした。(使い方を掴むまでは結構試行錯誤でしたが・・・)</p>\n<h1>================================\nsente側</h1>\n<p><code>sente</code> 側は <code>websocket</code> を通して来たリクエストに対して、正規表現を使って場合分けするだけです。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; 正規表現\n(def ^:private prefix #&quot;(^@wolfram)(.*)&quot;)</p>\n<p>(defmethod -event-msg-handler\n:chat/post\n[{:as ev-msg :keys [event id ?data ring-req ?reply-fn send-fn]}]\n;; nthでも良いけどIndex~の例外が出るのでlastにする\n;; 正規表現的に最大でも3つの要素のvectorになる\n(when-let [msg (last (re-find prefix ?data))]\n(go\n(&gt;! (:qasystem ring-req) (assoc ev-msg :?data msg))))\n(message/add-messages (get-in ring-req [:session :identity]) ?data)\n(msgs-broadcast))</p>\n<p>;; Wolframから返されるものを待ち受ける\n(defn watch-wolfram-service [watch-ch]\n(go-loop []\n(when-let [{:as ev-msg :keys [ring-req ?data]} (&lt;! watch-ch)]\n(message/add-messages (get-in ring-req [:session :identity]) ?data)\n(msgs-broadcast)\n(recur))))</p>\n<p><code>watch-wolfram-service</code> を <code>component</code> から起動される関数にしています。\nこれはWolfram側から問い合わせが来る <code>go-loop</code> になってます。</p>\n<p>結局 <code>channel</code> をコールバックみたいにしか使えてないのが心残り・・・</p>\n<h1>============================================\nコンポーネントの実装</h1>\n<p>ここまで作ったものとサーバーの起動をまとめます。</p>\n<p>.. code-block:: Clojure</p>\n<p>(ns earth-clj.component\n(:use [org.httpkit.server :only [run-server]])\n(:require [com.stuartsierra.component :as component]\n[taoensso.sente :as sente]\n[clojure.core.async :refer [go-loop &lt;! &gt;! chan] :as async]\n[earth-clj.socket :as socket]\n[earth-clj.wolfram :as wolfram]\n[earth-clj.core :as earth]))</p>\n<p>;; 基本的には変更可能な状態をコンポーネントに押し込めるイメージ\n;; 単純にrefやatomで持ってたものをrouter_などのローカル変数に押し込める</p>\n<p>(defrecord Wolfram [qasystem]\ncomponent/Lifecycle\n(start [this]\n(let [wolfram-ch (chan)]\n(println &quot;;; Starting Wolfram Alpha&quot;)\n(wolfram/start-wolfram-service wolfram-ch)\n(assoc this :qasystem wolfram-ch)))\n(stop [this]\n(println &quot;;; Wolfram stopped&quot;)\n(assoc this :qasystem nil)))</p>\n<p>(defn create-wolfram []\n(map-&gt;Wolfram {}))</p>\n<p>;; WebSocketコンポーネント\n(defrecord Socket [router]\ncomponent/Lifecycle\n(start [this]\n(if router\nthis\n(do (println &quot;;; Starting Chat Socket&quot;)\n(let [router_ (sente/start-server-chsk-router! socket/ch-chsk socket/event-msg-handler)\nread-ch (chan)]\n(socket/watch-wolfram-service read-ch)\n(assoc this :reader read-ch :router router_)))))\n(stop [this]\n(if (not router)\nthis\n(do (try (router)                                     ;; router自身が終了用の関数\n(catch Throwable t\n&quot;;; Error when stopping database&quot;))\n(println &quot;;; Database stopped&quot;)\n(assoc this :reader nil :router nil)))))</p>\n<p>;; Socketコンポーネントの作成用関数\n(defn create-socket []\n(map-&gt;Socket {}))</p>\n<p>;; requestにQAコンポーネントとその受信用チャネルを追加するミドルウェア\n(defn wrap-app-component [f qa reader]\n(fn [req]\n(f (assoc req :reader reader :qasystem qa))))</p>\n<p>;; ミドルウェアを適用したringハンドラを返す関数\n(defn make-handler [qa reader]\n(wrap-app-component earth/app qa reader))</p>\n<p>(defrecord Server [server host port join? router qasystem]\ncomponent/Lifecycle\n(start [this]\n(if server\nthis\n(do (println &quot;;; Starting HTTP Server&quot;)\n(let [server (run-server (make-handler (:qasystem qasystem) (:reader router))\n{:host  host\n:port  port\n:join? join?})]\n(assoc this :server server)))))\n(stop [this]\n(if (not server)\nthis\n(do (try (server)                                     ;; http-kitの終了\n(catch Throwable t\n(print &quot;;; Error when stopping HTTP server&quot;)))\n(println &quot;;; HTTP server stopped&quot;)\n(assoc this :server nil)))))</p>\n<p>;; HTTPサーバコンポーネント\n(defn create-http-server [host port join?]\n;; map-&gt;ReacodNameで引数に与えられたMapからレコードを生成する\n(map-&gt;Server {:host host :port port :join? join?}))</p>\n<p>;; システム作成用関数\n(defn create-system [&amp; {:keys [host port join?]\n:or   {host &quot;localhost&quot; port 4000 join? false}}]\n(component/system-map\n:qasystem (create-wolfram)\n:router (create-socket)\n:server (component/using\n(create-http-server host port join?)\n[:router :qasystem])))</p>\n<p>使い方が合っているかは謎。\n<code>let</code> とかで作ったchannelを引数に渡すことで <code>go-loop</code> を起動してたりします。\nまた、 <code>qasystem</code> と <code>router</code> は互いに依存してますが、 <code>component/using</code> でやろうとすると\n怒られたので <code>server</code> がどちらにも依存しているって形式にしました。</p>\n<p>あとはリクエストマップに <code>channel</code> を押し込んでいる部分ですがこれでいいのかかなり微妙な気分ではあります。</p>\n<h1>============================================\n出来たもの</h1>\n<p>Twitterにも似たようなの投稿しましたが出来たものは以下みたいなやつです。\n<code>@wolfram qa</code> でちゃんとした質問なら <code>qa</code> の回答が自動で帰ってきます。</p>\n<p>.. image:: /images/Wolfram.gif\n:alt: Quicksilver</p>\n<h1>============================================\nまとめ</h1>\n<ul>\n<li>\n<p><code>component</code> はPhoenixのUmbrellaに似ていると思った</p>\n<ul>\n<li>やろうと思えば <code>channel</code> 同士の依存とかも管理できそう？</li>\n<li>依存先が落ちたら再起動とか出来るんだろうか</li>\n</ul>\n</li>\n<li>\n<p><code>core.async</code> の簡単な使い方が分かった</p>\n<ul>\n<li>本当は <code>pipeline</code> とか <code>pipe</code> とか使いたかったですが上手くいかず。</li>\n</ul>\n</li>\n</ul>",
      "date_published": "2018-05-24T23:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/clojure-web2/",
      "url": "https://zonuko.github.io/posts/clojure-web2/",
      "title": "ClojureでWebアプリ続き(WebSocketとチャット)",
      "content_html": "<p>ClojureでWebアプリ続き(WebSocketとチャット)\n#############################################</p>\n<p>単発で終わったと見せかけて続きです。</p>\n<p><code>WebSocket</code> 使ってチャットでも作ってみます。\n使うものは <code>sente &lt;https://github.com/ptaoussanis/sente&gt;</code>_ です。単純にググったら最初の方に出てきたので使ってみます。\nとりあえずシンプルに以下が目標です。</p>\n<ul>\n<li>\n<p>チャットルームとかは作らずに全員同じチャットルーム</p>\n<ul>\n<li>要するにサーバーからの通知は必ずブロードキャストで行きます。</li>\n</ul>\n</li>\n<li>\n<p>テーブル作ってそこに保存すること(メッセージと、ログインしている場合は発信者のID)</p>\n</li>\n<li>\n<p>リプライ機能とかは作らない</p>\n</li>\n</ul>\n<p>リポジトリなどは前回とおんなじ</p>\n<h1>============================================\n導入</h1>\n<p>以下の依存関係をを <code>project.clj</code> に追加します。</p>\n<ul>\n<li>\n<p><code>[gravatar &quot;1.1.0&quot;]</code></p>\n<ul>\n<li>チャット画面のアバター表示用別になくても良い</li>\n</ul>\n</li>\n<li>\n<p><code>[http-kit &quot;2.2.0&quot;]</code></p>\n<ul>\n<li><code>sente</code> のサンプルによく使われていたので <code>jetty</code> から置き換え</li>\n</ul>\n</li>\n<li>\n<p><code>[com.taoensso/sente &quot;1.12.0&quot;]</code></p>\n<ul>\n<li><code>sente</code> 本体</li>\n</ul>\n</li>\n</ul>\n<p>とりあえずこんなもんです。</p>\n<h1>============================================\nサーバー側の実装</h1>\n<p>適当にネームスペース掘ります。今回は <code>earth-clj.socket</code> でフォルダ直下にしてしまいました。</p>\n<p>まずは <code>sente</code> のリポジトリのREADMEに書いてあるように実装します。</p>\n<p>.. code-block:: Clojure</p>\n<p>(ns earth-clj.socket\n(:require [taoensso.sente :as sente]\n[clojure.core.async :refer [go-loop &lt;!]]\n[compojure.core :refer [defroutes context GET POST]]\n[earth-clj.db.message :as message]\n[taoensso.timbre    :as timbre :refer (tracef debugf infof warnf errorf)]\n[taoensso.sente.server-adapters.http-kit :refer (get-sch-adapter)]))</p>\n<p>;; sente用の設定 要確認\n(let [{:keys [ch-recv send-fn connected-uids\najax-post-fn ajax-get-or-ws-handshake-fn]}\n(sente/make-channel-socket! (get-sch-adapter) {})]\n(def ring-ajax-post ajax-post-fn)\n(def ring-ajax-get-or-ws-handshake ajax-get-or-ws-handshake-fn)\n(def ch-chsk ch-recv) ; ChannelSocket's receive channel\n(def chsk-send! send-fn) ; ChannelSocket's send API fn\n(def connected-uids connected-uids)) ; Watchable, read-only atom</p>\n<p>(defroutes socket-routes\n;; <other stuff>\n;;; Add these 2 entries: ---&gt;\n(GET  &quot;/chsk&quot; req (ring-ajax-get-or-ws-handshake req))\n(POST &quot;/chsk&quot; req (ring-ajax-post req)))</p>\n<p><code>WebSocket</code> の受信/発信用の <code>Var</code> 定義と接続とかに使われる <code>routes</code> の設定がされるっぽいです。\n正直そんなに理解してないです。 <code>connected-uids</code> がコネクションに対するワンタイムトークンみたいになってるのかな？って程度です。</p>\n<p>ただ、 <code>ch-chsk</code> が <code>core.async</code> の <code>channel</code> になっていることだけ注意が必要かもです。\n<code>println</code> とかすると <code>clojure.core.async.impl.channels.ManyToManyChannel</code> のインスタンスであることがわかったりします。\n<code>ManyToMany</code> があるなら他にもあるんじゃないかとか、 <code>core.async</code> 自体も理解してないのでココらへんのオブジェクトが何なのかは追々・・・</p>\n<h1>サーバー側のイベント</h1>\n<p>サーバー側のイベント処理を書いていきます。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; 全UIDに対してメッセージをブロードキャストする\n;; TODO: UIDの扱い方がよくわからない\n(defn msgs-broadcast []\n(debugf &quot;BroadCastMsgs&quot;)\n(doseq [uid (:any @connected-uids)]\n(chsk-send! uid [:chat/msgs (message/all-messages)])))</p>\n<p>;; イベントを送られてきたIDによって分岐するマルチメソッド\n(defmulti -event-msg-handler\n&quot;Multimethod to handle Sente <code>event-msg</code>s&quot;\n:id)</p>\n<p>;; :idが何にもマッチしなかった場合\n(defmethod -event-msg-handler\n:default\n[{:as ev-msg :keys [event id ?data ring-req ?reply-fn send-fn]}]\n(let [session (:session ring-req)\nuid     (:uid     session)]\n(debugf &quot;Unhandled event: %s&quot; event)\n(when ?reply-fn\n(?reply-fn {:umatched-event-as-echoed-from-from-server event}))))\n;; 初期化処理\n(defmethod -event-msg-handler\n:chat/init\n[{:as ev-msg :keys [event id ?data ring-req ?reply-fn send-fn]}]\n(let [session (:session ring-req)\nuid     (:uid     session)]\n(debugf &quot;Init event: %s&quot; event)\n(when ?reply-fn\n(?reply-fn (message/all-messages)))))\n;; チャットメッセージ投稿\n;; DBにインサート後ブロードキャストを行う\n(defmethod -event-msg-handler\n:chat/post\n[{:as ev-msg :keys [event id ?data ring-req ?reply-fn send-fn]}]\n(message/add-messages (get-in ring-req [:session :identity]) ?data)\n(msgs-broadcast))</p>\n<p>;; イベントハンドラ発火元関数\n(defn event-msg-handler\n&quot;Wraps <code>-event-msg-handler</code> with logging, error catching, etc.&quot;\n[{:as ev-msg :keys [id ?data event]}]\n(-event-msg-handler ev-msg) ; Handle event-msgs on a single thread\n;; Handle event-msgs on a thread pool\n#_(future (-event-msg-handler ev-msg)))</p>\n<p>;; コネクションを開始する関数群\n(defonce router_ (atom nil))\n(defn stop-router! [] (when-let [stop-f @router_] (stop-f)))\n(defn start-router! []\n(stop-router!)\n(reset! router_\n;; 実際にはgo-loopに変換される。go-loopにしても似たようなものが取得できる\n;; 実際にドキュメントでは熟練者ならそのようにするような記載有り\n(sente/start-server-chsk-router!\nch-chsk event-msg-handler))) ;; イベントが来るたびにevent-msg-handlerが呼ばれる</p>\n<p>DBへのインサート処理とか、ページレンダリングの部分とか <code>earth-clj.core</code> での初期起動とかは面倒なので割愛です。</p>\n<p>ほぼほぼ <code>公式サンプル &lt;https://github.com/ptaoussanis/sente/tree/master/example-project&gt;</code>_ 丸パクリですが、自分で幾つかイベント追加してます。\nマルチメソッドによって <code>:id</code> の値で分岐してるので、初期化用のメソッドとメッセージ投稿用のメソッドを追加してます。</p>\n<p>また、コメントにもありますが、 <code>sente/start-server-chsk-router!</code> の実態は <code>go-loop</code> のようです。\n実際にソース見てないので、 <code>ドキュメント頼り &lt;http://ptaoussanis.github.io/sente/taoensso.sente.html#var-start-server-chsk-router.21&gt;</code>_ ですが、\nお試しで以下のようなコード書いた感じは大体同じレスポンスが取れるのでまぁ間違ってないのかなと。</p>\n<p>.. code-block:: Clojure</p>\n<p>(go-loop []\n(when-let [data (&lt;! ch-chsk)]\n(println data)\n(recur)))</p>\n<p>以下みたいな感じ</p>\n<p>.. code-block:: Clojure</p>\n<p>{:?reply-fn nil, :ch-recv #object[clojure.core.async.impl.channels.ManyToManyChannel 0x1e6dc10e &quot;clojure.core.async.impl.channels.ManyToManyChannel@1e6dc10e&quot;], :client-id &quot;48eafbcd-f0c2-441a-9129-05278e039c97&quot;, :connected-uids #atom[{:ws #{:taoensso.sente/nil-uid}, :ajax #{}, :any #{:taoensso.sente/nil-uid}} 0x77ce4d53], :uid :taoensso.sente/nil-uid, :event [:chat/post &quot;bbb&quot;], :id :chat/post, :ring-req {:identity 1, :cookies {&quot;io&quot; {:value &quot;2uQMNqiEQ0OUNAqGAAAD&quot;}, &quot;ring-session&quot; {:value &quot;9b0e2ba2-6918-459f-8352-3b6bfe9251f5&quot;}}, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :params {:client-id &quot;48eafbcd-f0c2-441a-9129-05278e039c97&quot;}, :flash nil, :route-params {}, :headers {&quot;origin&quot; &quot;http://localhost:4000&quot;, &quot;host&quot; &quot;localhost:4000&quot;, &quot;upgrade&quot; &quot;websocket&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&quot;, &quot;cookie&quot; &quot;io=2uQMNqiEQ0OUNAqGAAAD; ring-session=9b0e2ba2-6918-459f-8352-3b6bfe9251f5&quot;, &quot;connection&quot; &quot;Upgrade&quot;, &quot;pragma&quot; &quot;no-cache&quot;, &quot;sec-websocket-key&quot; &quot;H3cJYBZ1veyIIpl09QkvVA==&quot;, &quot;accept-language&quot; &quot;ja,en-US;q=0.9,en;q=0.8,de;q=0.7,zh-CN;q=0.6,zh;q=0.5,fr;q=0.4,zh-TW;q=0.3&quot;, &quot;sec-websocket-version&quot; &quot;13&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;sec-websocket-extensions&quot; &quot;permessage-deflate; client_max_window_bits&quot;, &quot;cache-control&quot; &quot;no-cache&quot;}, :async-channel #object[org.httpkit.server.AsyncChannel 0x79821c77 &quot;/0:0:0:0:0:0:0:1:4000&lt;-&gt;/0:0:0:0:0:0:0:1:51664&quot;], :server-port 4000, :content-length 0, :form-params {}, :compojure/route [:get &quot;/chsk&quot;], :websocket? true, :session/key &quot;9b0e2ba2-6918-459f-8352-3b6bfe9251f5&quot;, :query-params {&quot;client-id&quot; &quot;48eafbcd-f0c2-441a-9129-05278e039c97&quot;}, :content-type nil, :character-encoding &quot;utf8&quot;, :uri &quot;/chsk&quot;, :server-name &quot;localhost&quot;, :query-string &quot;client-id=48eafbcd-f0c2-441a-9129-05278e039c97&quot;, :body nil, :multipart-params {}, :scheme :http, :request-method :get, :session {:identity 1, :ring.middleware.anti-forgery/anti-forgery-token &quot;NmfuFYMg+lHHS2opYqxkSPzoxDP0sGd6Hr0Xa2AWq4E3lDY1tfTTi/G+wQAS62RvHo0hUFodvQzXsyhF&quot;}}, :?data &quot;bbb&quot;, :send-fn #function[taoensso.sente/make-channel-socket-server!/send-fn--23743]}</p>\n<h1>============================================\nクライアント側の実装</h1>\n<p>基本的に <code>ClojureScript</code> で実装することになります。\nサーバー側と似たような感じで、 <code>earth-cljs.socket</code> ネームスペースとしました。</p>\n<p>初期設定もサーバーと同じようにREADMEに書いてある物そのままです。</p>\n<p>.. code-block:: Clojure</p>\n<p>(ns earth-cljs.socket\n(:require-macros [cljs.core.async.macros :as asyncm :refer (go go-loop)])\n(:require [cljs.core.async :as async :refer (&lt;! &gt;! put! chan)]\n[earth-cljs.util :as util :refer ($)]\n[taoensso.timbre :as timbre :refer-macros (tracef debugf infof warnf errorf)]\n[taoensso.encore :as encore :refer-macros (have have?)]\n[goog.string :as gstring]\n[gravatar.core :as gr]\n[taoensso.sente  :as sente :refer (cb-success?)]))</p>\n<p>;;; Add this: ---&gt;\n(let [{:keys [chsk ch-recv send-fn state]}\n(sente/make-channel-socket! &quot;/chsk&quot; ; Note the same path as before\n{:type :auto})] ; e/o #{:auto :ajax :ws}\n(def chsk chsk)\n(def ch-chsk ch-recv) ; ChannelSocket's receive channel\n(def chsk-send! send-fn) ; ChannelSocket's send API fn\n(def chsk-state state)) ; Watchable, read-only atom</p>\n<p>中身もコードの意味もほとんどサーバー側と同じでちょっと感動します。\nちなみに恥ずかしい限りですが <code>sente</code> の中身覗いて <code>cljc</code> の存在を知りました。</p>\n<h1>描画用の関数と初期化用関数</h1>\n<p>DOM生成用関数とアクセス時に初期データを取ってくる関数を定義してます。</p>\n<p>.. code-block:: Clojure</p>\n<p>(defn- update-msgs [data]\n(let [output-el ($ &quot;comment-container&quot;)]\n(set! (.-innerHTML output-el)\n(reduce #(let [{:keys [email name date message]} %2]\n(str %1\n&quot;<div class='comment'>&quot;\n&quot;<a class='avatar'>&quot;\n&quot;<img src='\" (gr/avatar-url (if email email \"\") :https true) \"' />&quot;\n&quot;</a>&quot;\n&quot;<div class='content'>&quot;\n&quot;<a class='author'>&quot;\n(gstring/htmlEscape (if name name &quot;Anonymous&quot;))\n&quot;</a>&quot;\n&quot;<div class='metadata'>&quot;\n&quot;<span class='date'>&quot;\n(gstring/htmlEscape date)\n&quot;</span>&quot;\n&quot;</div>&quot;\n&quot;<div class='text'>&quot;\n(gstring/htmlEscape message)\n&quot;</div>&quot;\n&quot;</div>&quot;\n&quot;</div>&quot;)) &quot;&quot; data))\n(set! (.-scrollTop output-el) (.-scrollHeight output-el))))</p>\n<p>(defn- init-msg-handler []\n(chsk-send!\n[:chat/init]\n8000\n(fn [reply]\n(if (sente/cb-success? reply)\n(update-msgs reply)\n#(.log js/console %)))))</p>\n<p>画面表示用の関数は普通に文字列としてDOM生成してるだけです。ちなみにここだけ <code>semantic ui</code> 使ってます。</p>\n<p><code>init-msg-handler</code> は初期化時に呼び出すことを想定しています。\n<code>chsk-send!</code> 関数の最後の引数にコールバック用の関数をおいておくとこれ勝手に呼んでくれて便利です。</p>\n<h1>クライアント側のイベント</h1>\n<p>まぁサーバー側とほとんど同じなのでソースだけ貼っておきます。</p>\n<p>.. code-block:: Clojure</p>\n<p>;; マルチメソッドによるサーバーからのイベント待受\n;; :idで判別される\n;;\n(defmulti -event-msg-handler\n&quot;Multimethod to handle Sente <code>event-msg</code>s&quot;\n:id) ; Dispatch on event-id</p>\n<p>;; デフォルトメソッド\n(defmethod -event-msg-handler\n:default ; Default/fallback case (no other matching handler)\n[{:as ev-msg :keys [event]}]\n(.log js/console (str &quot;Unhandled event: &quot; event)))</p>\n<p>(defmethod -event-msg-handler :chsk/state\n[{:as ev-msg :keys [?data]}]\n(let [[old-state-map new-state-map] (have vector? ?data)]\n(if (:first-open? new-state-map)\n(.log js/console (str &quot;Channel socket successfully established!: &quot; new-state-map))\n(.log js/console (str &quot;Channel socket state change: &quot; new-state-map)))))</p>\n<p>;; broadcastの受信を行う\n(defmethod -event-msg-handler :chsk/recv\n[{:as ev-msg :keys [?data]}]\n(case (first ?data)\n:chat/msgs (update-msgs (second ?data))\n(.log js/console (str ?data))))</p>\n<p>(defmethod -event-msg-handler :chsk/handshake\n[{:as ev-msg :keys [?data]}]\n(let [[?uid ?csrf-token ?handshake-data] ?data]\n(.log js/console (str &quot;Handshake: &quot; ?data))\n(init-msg-handler)))</p>\n<p>(defn event-msg-handler\n&quot;Wraps <code>-event-msg-handler</code> with logging, error catching, etc.&quot;\n[{:as ev-msg :keys [id ?data event]}]\n(-event-msg-handler ev-msg))</p>\n<p>(defn- send-msg-handler [e]\n(let [e ($ &quot;chat-msg&quot;)\nv (.-value e)]\n(chsk-send! [:chat/post v])\n(set! (.-value e) &quot;&quot;)))</p>\n<p>(defonce router_ (atom nil))\n(defn stop-router! [] (when-let [stop-f @router_] (stop-f)))\n(defn start-router! []\n(stop-router!)\n(reset! router_\n(sente/start-client-chsk-router!\nch-chsk event-msg-handler)))</p>\n<p>(when-let [target-el ($ &quot;chat-form&quot;)]\n(start-router!))</p>\n<p>(when-let [target-el ($ &quot;chat-send&quot;)]\n(.addEventListener target-el &quot;click&quot; send-msg-handler))</p>\n<p>こんな感じです。</p>\n<h1>============================================\nまとめ</h1>\n<ul>\n<li>\n<p><code>core.async</code> についてちょっと理解した。</p>\n<ul>\n<li>他のライブラリとか覗いても <code>core.async</code> をラップしたようなのとか、そもそも <code>core.async</code> だけでWebSocketしているような方もいたりでもうちょっと勉強したいです。</li>\n</ul>\n</li>\n<li>\n<p>知らないライブラリ調べながら使うと自分が余り使ってなかった構文とかの練習になる</p>\n<ul>\n<li>マルチメソッドとか積極的には使ってなかったのでいい勉強になります。</li>\n</ul>\n</li>\n<li>\n<p>Webアプリ楽しい</p>\n<ul>\n<li>仕事でも結構作ってますがやっぱり楽しいですね。</li>\n<li>個人的にはHerokuに上げるだとかデプロイするだとかのいざこざ含めて結構好きです。</li>\n</ul>\n</li>\n</ul>\n<p>一応次作るものは考えているのでそのうちまた何か書きます。\nあ、あと最近Professional Clojureも平行して読んでいるのでそのまとめもそのうちということで。</p>\n<p>こう遊んでるとますますClojureを仕事にしたくなる。</p>",
      "date_published": "2018-05-15T23:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/clojure-web/",
      "url": "https://zonuko.github.io/posts/clojure-web/",
      "title": "ClojureでWebアプリ",
      "content_html": "<p>ClojureでWebアプリ\n################################</p>\n<p>前回に引き続きClojureです。</p>\n<p>結構好きなので <code>これ &lt;http://ayato-p.github.io/clojure-beginner/intro_web_development/&gt;</code>_ を参考にしつつ\n色々追加してWebアプリ作ってみました。</p>\n<p>基本的には会社でのサンプル用に作ってた <code>Webアプリ &lt;https://bitbucket.org/y_fujiwara/earthdemo&gt;</code>_ がありまして・・・\n今回はそれをリプレイス＆機能追加って感じで、天気みたり、検索した地域ブックマークしたりするWebアプリにしました。</p>\n<ul>\n<li><code>作ったもの &lt;https://earth-clj.herokuapp.com/&gt;</code>_</li>\n<li><code>リポジトリ。master一本なのは愛嬌 &lt;https://gitlab.com/y-fujiwara/earth-clj.git&gt;</code>_</li>\n</ul>\n<h1>============================================\n使ったもの</h1>\n<ul>\n<li>\n<p>認証</p>\n<ul>\n<li>buddy</li>\n<li>特に苦労しなかった。</li>\n<li>パスワードのハッシュ化とかも。</li>\n</ul>\n</li>\n<li>\n<p>ルーティング</p>\n<ul>\n<li>Compojure</li>\n<li>参考にしたやつそのまんまですね。</li>\n</ul>\n</li>\n<li>\n<p>マイグレーション</p>\n<ul>\n<li>migratus</li>\n<li>そんなに困らなかったですが、herokuに上げるときにはかなり悩みました。</li>\n</ul>\n</li>\n<li>\n<p>クライアント側</p>\n<ul>\n<li>\n<p>ClojureScript</p>\n<ul>\n<li><code>lein cljsbuild auto</code> で使ってた。</li>\n</ul>\n</li>\n<li>\n<p>Reagent</p>\n<ul>\n<li>ClojureScriptでReact使えるやつ。hiccupと似たシンタックスが使いやすかったです。\nReactの経験はあったのでそことの差に戸惑ったけど、どちらかと言うとClojureScriptと普通のJavaScriptの差ですかね。</li>\n</ul>\n</li>\n<li>\n<p>cljsjs/chartjs</p>\n</li>\n<li>\n<p>cljsjs/leaflet</p>\n</li>\n<li>\n<p>cljsjs/moment</p>\n<ul>\n<li>各JavaScriptライブリのClojureラッパー</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上記の物以外は上に書いた参考サイトと同じです。 (hiccup使ってたりとか)</p>\n<h1>============================================\n苦労したところ</h1>\n<ul>\n<li>\n<p><code>jdbc</code> が必ずリストで返してくること。</p>\n<ul>\n<li>知ってはいたが結構ハマりました。セッションからユーザー情報引っ張るところだったかな？</li>\n</ul>\n</li>\n<li>\n<p><code>ClojureScript</code> と既存のJavaScriptライブラリの接続</p>\n<ul>\n<li><code>new</code> されたものを変数に置くこと前提にしていたりしてどうしようか悩みました。結局DOMに関することだったので\n一回対象の要素の中身消して作り直すとかにしてしまいましたが。</li>\n</ul>\n</li>\n<li>\n<p><code>environ</code> ライブラリのアップデート</p>\n<ul>\n<li>\n<p>調べたら、<code>env</code> で読み出す <code>project.clj</code> に書いた内容は必ず文字列として持ってくるようになってみたいでした。\n<code>参考 &lt;https://github.com/weavejester/environ/issues/36&gt;</code>_</p>\n</li>\n<li>\n<p>結局DB設定は <code>read-string</code> で読むことで解決</p>\n</li>\n<li>\n<p>booleanみたいなものを付けている場合は設定されているstringからif文掛けてboolean返すような関数を作って回避しました。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>DOMのAPI触る分にはそこまで楽にならないのかなと思いました。</p>\n<ul>\n<li>結局直接API触る必要がある。</li>\n</ul>\n</li>\n</ul>\n<p>.. code-block:: Clojure</p>\n<p>(defn- update-html [elem tag]\n(set! (.-innerHTML elem) tag))</p>\n<ul>\n<li>\n<p>herokuデプロイ周り</p>\n<ul>\n<li>まぁいつもデプロイはハマるんですがやっぱりハマりました。</li>\n<li>migratusどうやって実行させるか。結局参考サイトと同様に <code>main.clj</code> での実行前にやらせてしまう方向にしてしまいました。</li>\n<li>mainメソッド使うのどうせデプロイ時だけだし良いかなと・・・</li>\n</ul>\n</li>\n</ul>\n<p>.. code-block:: Clojure</p>\n<p>(ns earth-clj.main\n(:require [earth-clj.core :as core]\n[migratus.core :as migratus]\n[earth-clj.db :as db])\n; mainクラスの生成\n(:gen-class))</p>\n<p>; 第一引数にthisを取らないとstatic\n(defn -main [&amp; {:as args}]\n;; 起動時にmigratusのマイグレーション\n(migratus/migrate db/migrate-spec)\n(core/start-server\n:host (get args &quot;host&quot;) :port (get args &quot;port&quot;) :join? true))</p>\n<h1>============================================\n楽しかったところとか良かったところとか</h1>\n<ul>\n<li>\n<p>適当に関数を小分けにするだけでも効果を感じられる。</p>\n<ul>\n<li>DOMのエレメント取るだけとかそういうのも関数にしましたが、スレッドマクロとかと組み合わせると単純な関数の小分けでも結構効果を感じられました。</li>\n<li>関数型の複数の関数を組み合わせる抽象化が結構実感できた気がします。特にClojureScriptで一つのイベントで複数の変更をするだとかのときは。</li>\n</ul>\n</li>\n<li>\n<p>hiccupめっちゃ良い</p>\n<ul>\n<li>html書くのが苦にならない</li>\n<li><code>jade</code> とか <code>haml</code> とかも触ったことありましたが、一番感触よかったです。\n特殊構文ではなくて言語に沿ったデータ構造になっているからな気もします。</li>\n</ul>\n</li>\n<li>\n<p><code>ClojureScript</code> でのDOM更新とかは結構スマートにかける気がしました。</p>\n<ul>\n<li><code>document.getElementById</code> とかで取った要素に対して何かつけるとかが、 スレッドマクロ使うとわかりやすいと思いました。</li>\n<li>ただし、一つの関数で複数のDOMに関して操作したいときは悩みました。結局普通に複数の式書いちゃいましたが・・・</li>\n</ul>\n</li>\n</ul>\n<p>.. code-block:: Clojure</p>\n<p>(defn- owm-ajax-handler [callback response]\n(let [weather (first (get-edn response &quot;weather&quot;))\nsys (get-edn response &quot;sys&quot;)\nmain (get-edn response &quot;main&quot;)\nwind (get-edn response &quot;wind&quot;)\nclouds (get-edn response &quot;clouds&quot;)\ncoord (get-edn response &quot;coord&quot;)]\n(-&gt; (util/$ &quot;weather&quot;)\n(update-html (image-elem weather)))\n(-&gt; (util/$ &quot;city-name&quot;)\n(update-text (title-text (gstring/htmlEscape (get-edn response &quot;name&quot;)))))\n(-&gt; (util/$ &quot;weekly-city&quot;)\n(update-text (gstring/htmlEscape (get-edn response &quot;name&quot;))))\n(-&gt; (util/$ &quot;temperature&quot;)\n(update-text (gstring/htmlEscape (util/calc-temp (get-edn main &quot;temp&quot;)))))\n(-&gt; (util/$ &quot;sunrise&quot;)\n(update-text (util/unix-to-time-full (gstring/htmlEscape (get-edn sys &quot;sunrise&quot;)))))\n(-&gt; (util/$ &quot;sunset&quot;)\n(update-text (util/unix-to-time-full (gstring/htmlEscape (get-edn sys &quot;sunset&quot;)))))\n(-&gt; (util/$ &quot;pressure&quot;)\n(update-text (str (gstring/htmlEscape (get-edn main &quot;pressure&quot;)) &quot;hpa&quot;)))\n(-&gt; (util/$ &quot;humidity&quot;)\n(update-text (str (gstring/htmlEscape (get-edn main &quot;humidity&quot;)) &quot;%&quot;)))\n(-&gt; (util/$ &quot;wind&quot;)\n(update-text (str (gstring/htmlEscape (get-edn wind &quot;speed&quot;)) &quot;m/s&quot;)))\n(-&gt; (util/$ &quot;cloud&quot;)\n(update-text (str (gstring/htmlEscape (get-edn clouds &quot;all&quot;)) &quot;%&quot;)))\n(-&gt; (util/$ &quot;latlon&quot;)\n(update-text (str (gstring/htmlEscape (get-edn coord &quot;lat&quot;)) &quot; &quot; (gstring/htmlEscape (get-edn coord &quot;lon&quot;)))))\n(callback (get-edn coord &quot;lat&quot;) (get-edn coord &quot;lon&quot;))))</p>\n<p>Ajaxでコールバックするときに <code>partial</code> したりとか言う工夫もしてましたが、通常のJavaScriptでも変わらない気がしました。</p>\n<p>その他にもクロージャ作って状態を閉じ込める <code>Reagent</code> とかも触っててなるほどなと思いました。</p>\n<h1>============================================\nまとめとか</h1>\n<ul>\n<li>\n<p>全体的に <code>Clojure</code> でのデータ構造とかはかなり触ってて気持ちがいいです。</p>\n<ul>\n<li>『プログラミングClojure』とかにもありますが、APIからデータそのものについて考えるべしって思想が感じられるのがすごい感触良いです。</li>\n<li>学生自体はPython使ってましたが、いい意味で言語の思想を押し付けられる系の言語が好きなようです。</li>\n</ul>\n</li>\n<li>\n<p>まだまだこの書き方で良いの？って部分がある。</p>\n<ul>\n<li>上記の例でも貼り付けましたが、一つの関数の中で複数の式書いたりしてるのありなの？って気分です。</li>\n</ul>\n</li>\n<li>\n<p>サーバー側はほとんど最初に出した参考サイトのままなのでもうちょっといろいろいじれたら良いかなと思います。</p>\n<ul>\n<li>ClojureScriptは1からだったので結構頑張りました。</li>\n<li>個人的にはクライアント側はそこまで趣味じゃないのでその他の部分を頑張りたいところです。別に嫌いなわけではないですが・・・</li>\n</ul>\n</li>\n</ul>\n<p>多分しばらくClojureで遊んでいると思うので4Clojureやるかアルゴリズムクイックリファレンス続きやるかでもしていると思います。\n仕事にできれば良いなと思いますがもうちょっと精進が必要ですかね。</p>",
      "date_published": "2018-04-05T23:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/clojure-intro/",
      "url": "https://zonuko.github.io/posts/clojure-intro/",
      "title": "プログラミングClojureまとめ",
      "content_html": "<p>プログラミングClojureまとめ\n################################</p>\n<p>大分久しぶりの投稿。ブロックチェーンで遊んだりしてました。</p>\n<p>プログラミングClojureちょっと前にやったので気になったところをまとめておきます。\nついでにアルゴリズムクイックリファレンスの探索のところをClojureでやったので適当にのせつつ</p>\n<h1>==================================\n再帰</h1>\n<p>用意されているライブラリ &gt; <code>lazy-seq</code> &gt; <code>recur</code> &gt; 再帰って感じのおすすめらしいです。なので、ライブラリに合った関数がなければ <code>lazy-seq</code> を使う。\n<code>lazy-seq</code> にすることで再帰によって起こされるJVMの問題を解決しようとしているらしい。\nただ、正直 <code>lazy-seq</code> について理解するのが若干難しいと感じてます。</p>\n<p>二部探索を <code>recur</code> で書いたやつ。 <code>loop</code> と <code>recur</code></p>\n<p>.. code-block:: clojure</p>\n<p>(defn binary-search [array target]\n(loop [harf (sort array)]\n(let [mid (quot (count harf) 2)]\n(cond\n(= (count harf) 0) false\n(= (nth harf mid) target) true\n(&lt; (nth harf mid) target) (recur (drop (+ mid 1) harf))\n(&gt; (nth harf mid) target) (recur (take mid harf))\n:else false))))</p>\n<p><code>lazy-seq</code> をつかったやつその１。これは本からの写し。この手の無限シーケンスつくって <code>take</code> とかで取り出すのはなんとなく理解できる。</p>\n<p>.. code-block:: clojure</p>\n<p>(defn fibo\n([] (concat [0 1] (fibo 0N 1N)))\n([a b]\n(let [n (+ a b)]\n(lazy-seq cons n (fibo b n)))))</p>\n<p>無限のものではなくて、与えられたリストとかに対して使おうとすると理解が難しくなる印象。\n以下の二部探索木のノードを追加する部分で使ってみたがあっているかわからない。</p>\n<p>.. code-block:: clojure</p>\n<p>(defn- add-node\n[{value :value left :left right :right height :height :as node} data]\n(into {} (lazy-seq ;そもそも使い方あってんの？\n(if (&lt;= data value)\n(if (nil? left)\n(assoc node :left (create-node data))\n(assoc node :left (add-node (node :left) data)))\n(if (nil? right)\n(assoc node :right (create-node data))\n(assoc node :right (add-node (node :right) data)))))))</p>\n<p>なんでここで使おうと思ったかというと、 <code>assoc</code> とかの引数で再帰することになるので末尾再帰にならないんじゃね？から\nこういう場面で <code>recur</code> は良いのだろうかとか考えた結果という具合。なのでそもそも使い方があっているのかすらわからない。</p>\n<p>とりあえずは動いている感じ。ちなみに以下6つのルールが紹介されてました。</p>\n<ul>\n<li>直接再帰しない</li>\n<li>要素数が決まっているものは <code>recur</code> を使って再帰する</li>\n<li>巨大だったり要素数がわからないものについては <code>lazy-seq</code></li>\n<li>遅延シーケンスをやたらと実体化しない</li>\n<li>シーケンスライブラリに熟知する</li>\n<li>問題を細かくする</li>\n</ul>\n<p>自分で書いてて思いましたが、二部探索木だと要素数わかっているし <code>recur</code> でよいのでは？あと <code>into {}</code> すると実体化されている気もする。</p>\n<h1>==================================\n状態管理</h1>\n<p>超うろおぼえ</p>\n<p>普通はClojureではほとんどのものが変更不可能ですが、 <code>ref</code> とか <code>alter</code> とか <code>commute</code> だとか使うと変更可能にできる。</p>\n<p>ただし、変更可能にすることで非同期とか並行処理とかで競合が発生する可能性は当然高まるので、そこら辺で使い分けるとのこと。</p>\n<p>正直ほとんど覚えてないので読み返さないと・・・並行処理周りを支えているっぽいので。</p>\n<h1>==================================\nオブジェクト指向的なの色々</h1>\n<p>Java側のAPIを呼ぶ方法は結構前のほうで出てきてましたが、Clojureらしくこの手のことをやるにはどうするかが書いてありました。</p>\n<p>一番おもしろいなと思ったのはプロトコル使ってデータ型に対して外からの拡張が出来る点です。</p>\n<p><code>extend-type</code> とか使って既存のデータ型に後付するのが面白そう。</p>\n<p>.. code-block:: clojure</p>\n<p>(defprotocol Hoge\n(hoge [this])\n(hogehoge [this i]))</p>\n<p>(extend-type Integer\nHoge\n(hoge [a] a)\n(hogehoge [a i] (+ a i)))</p>\n<p>ただ、この章でJavaで言うところのクラス定義的なやり方がいくつか出てきたが使い分けがよくわからない。\nとりあえず <code>defrecord</code> にしている感じ。</p>\n<p>それ以外にはマルチメソッドとかも面白かったです。</p>\n<h1>============================\nまとめ</h1>\n<p><code>Lisp</code> 系の言語初めてでしたがかなり面白かったので継続して触り中です。</p>\n<p>カッコいかがなものかと思っていましたが、書いてみるとしっくりきます。</p>\n<p>ただ、JavaのサンプルをClojureに変更しようとすると無駄にクラスとかメソッドに意識を持っていかれて\n無意味な <code>defprotocol</code> とか <code>defrecord</code> とかしちゃうのでここらへんは使わないで済むのならなるべく使わない方向が良いのかなぁとか思っています。</p>\n<h1>============================\nおまけ</h1>\n<p>冒頭でも書きましたがアルゴリズムクイックリファレンスのサンプルをClojureで幾つか書き直してので貼ってみます。</p>\n<p>ハッシュサーチ</p>\n<p>.. code-block:: clojure</p>\n<p>(def ^:private table-size 6)</p>\n<p>(defn- generate-hash [val]\n(if (not val)\nnil\n(let [code (.hashCode val)]\n(cond\n(&lt; code 0) (mod (* -1 code) table-size)\n:else (mod code table-size)))))</p>\n<p>(defn- hash-load [array]\n(loop [hash-table (vec (repeat table-size [])) array array]\n(let [head (first array) rest (rest array) hash-val (generate-hash head)]\n(cond\n(= (count array) 0) hash-table\n:else (recur (assoc hash-table hash-val (conj (nth hash-table hash-val) head)) rest)))))</p>\n<p>(defn- inner-check [inner-array target]\n(loop [head (first inner-array) array inner-array]\n(cond\n(.equals head target) true\n(= (count array) 0) false\n:else (recur (first array) (rest array)))))</p>\n<p>(defn- search-exec [table target]\n(let [table-val (nth table (generate-hash target))]\n(cond\n(= (count table-val) 0) false\n(= (count table-val) 1) true\n:else (inner-check table-val target))))</p>\n<p>(defn hash-search [array target]\n(-&gt; array\nhash-load\n(search-exec target)))</p>\n<p>線形探索</p>\n<p>.. code-block:: clojure</p>\n<p>(defn linear-search [array target]\n(loop [head (first array) tail (rest array)]\n(cond\n(= head target) true\n(= (count tail) 0) false\n:else (recur (first tail) (rest tail)))))</p>\n<p>ブルームフィルタ</p>\n<p>.. code-block:: clojure</p>\n<p>(defn- add-bits [bit data size fns]\n(loop [bit bit func (first fns) funcs (rest fns)]\n(cond\n(nil? func) bit\n:else (recur (bit-or bit (bit-shift-left 1 (func data size))) (first funcs) (rest funcs)))))</p>\n<p>(defn- contains [bit value size fns]\n(loop [func (first fns) funcs (rest fns)]\n(cond\n(nil? func) true\n(= (bit-and bit (bit-shift-left 1 (func value size))) 0) false\n:else (recur (first funcs) (rest funcs)))))</p>\n<p>(defn- array-add-bits [array size fns]\n(loop [bit 0 head (first array) tail (rest array)]\n(cond\n(nil? head) bit\n:else (recur (add-bits bit head size fns) (first tail) (rest tail)))))</p>\n<p>(defn bloom-filter\n([array value]\n(let [size 1000 fns [(fn [e s] (mod (.hashCode e) s))]]\n(contains (array-add-bits array size fns) value size fns)))\n([array value size]\n(let [fns [(fn [e size] (mod (.hashCode e) size))]]\n(contains (array-add-bits array size fns) value size fns)))\n([array value size fns] (contains (array-add-bits array size fns) value size fns)))</p>",
      "date_published": "2018-03-02T01:00:00Z"
    },
    {
      "id": "https://zonuko.github.io/posts/phoenix-webpack/",
      "url": "https://zonuko.github.io/posts/phoenix-webpack/",
      "title": "Phoenixのフロントエンドをwebpackに置き換える",
      "content_html": "<p>Phoenixのフロントエンドをwebpackに置き換える\n###################################################</p>\n<p>Phoenixのフロントエンドのツールをwebpackにするのに思いの外手こずったので備忘録としておきます。</p>\n<h1>============================================\n前提事項</h1>\n<ul>\n<li>\n<p><code>mix phoenix.new hogehoge</code> はしてある前提です。</p>\n</li>\n<li>\n<p>参考にしたのは以下あたりです。勝手に感謝です。</p>\n<ul>\n<li>https://daruiapprentice.blogspot.jp/2016/04/using-webpack-with-phoenix-framework.html</li>\n<li>https://www.dailydrip.com/topics/elixirsips/drips/webpack-phoenix-and-elm</li>\n</ul>\n</li>\n</ul>\n<h1>============================================\n要らないファイルの削除</h1>\n<p><code>brunch-config.js</code> を削除します。大概忘れるので早めにやっておきます。</p>\n<h1>============================================\npackage.jsonの作成</h1>\n<p><code>package.json</code> を書き換えます。</p>\n<p>また、 <code>TypeScript</code> と <code>React.js</code> で試したので以下のような感じになりました。\n<code>dependencies</code> とかは各自 <code>npm install --save hoge</code> とか <code>npm install --save-dev hoge</code> とかしてもらえればいいと思います。</p>\n<p>また、コマンドで <code>watch</code> と <code>compile</code> だけ指定してあります。</p>\n<p>.. code-block:: JavaScript</p>\n<p>{\n&quot;repository&quot;: {},\n&quot;license&quot;: &quot;MIT&quot;,\n&quot;scripts&quot;: {\n&quot;watch&quot;: &quot;webpack --watch-stdin --progress --color&quot;,\n&quot;compile&quot;: &quot;webpack -p&quot;\n},\n&quot;dependencies&quot;: {\n&quot;flux&quot;: &quot;^3.1.2&quot;,\n&quot;react&quot;: &quot;^15.5.4&quot;,\n&quot;react-dom&quot;: &quot;^15.5.4&quot;,\n&quot;redux&quot;: &quot;^3.6.0&quot;,\n&quot;typescript&quot;: &quot;^2.3.4&quot;,\n&quot;phoenix&quot;: &quot;file:deps/phoenix&quot;,\n&quot;phoenix_html&quot;: &quot;file:deps/phoenix_html&quot;\n},\n&quot;devDependencies&quot;: {\n&quot;@types/flux&quot;: &quot;^3.1.0&quot;,\n&quot;@types/material-ui&quot;: &quot;^0.17.10&quot;,\n&quot;@types/phoenix&quot;: &quot;0.0.4&quot;,\n&quot;@types/react&quot;: &quot;^15.0.27&quot;,\n&quot;@types/react-dom&quot;: &quot;^15.5.0&quot;,\n&quot;awesome-typescript-loader&quot;: &quot;^3.1.3&quot;,\n&quot;bootstrap-sass&quot;: &quot;^3.3.7&quot;,\n&quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;,\n&quot;css-loader&quot;: &quot;^0.28.4&quot;,\n&quot;extract-text-webpack-plugin&quot;: &quot;^2.1.2&quot;,\n&quot;file-loader&quot;: &quot;^0.11.2&quot;,\n&quot;node-sass&quot;: &quot;^4.5.3&quot;,\n&quot;sass-loader&quot;: &quot;^6.0.6&quot;,\n&quot;source-map-loader&quot;: &quot;^0.2.1&quot;,\n&quot;style-loader&quot;: &quot;^0.18.2&quot;,\n&quot;url-loader&quot;: &quot;^0.5.9&quot;,\n&quot;webpack&quot;: &quot;^2.6.1&quot;\n}\n}</p>\n<p><code>phoenix_html</code> とかのインストールがたまにおかしくなるので、以下を参照にアップデートをかけます。</p>\n<p>https://github.com/phoenixframework/phoenix/issues/1622</p>\n<h1>============================================\nwebpack.config.jsonの作成</h1>\n<p>webpackの設定ファイルを以下のような感じで作ります。\nwebpackのバージョンの差異かなんかで前まで <code>url</code> だとか <code>file</code> だとかで指定されていた部分を\n<code>url-loader</code> などの形式にしてます。</p>\n<p>また、 <code>ExtractTextPlugin.extract</code> の部分も参考サイトをそのままやると怒られるので怒られた内容通りに変更します。</p>\n<p>それ以外だと <code>TypeScript</code> ゆえにそれに準じているという程度かと。</p>\n<p>.. code-block:: JavaScript</p>\n<p>var ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);\nvar CopyWebpackPlugin = require(&quot;copy-webpack-plugin&quot;);</p>\n<p>module.exports = {\nentry: [&quot;./web/static/js/App.tsx&quot;, &quot;./web/static/css/app.scss&quot;],\noutput: {\nfilename: &quot;js/app.js&quot;,\npath: __dirname + &quot;/priv/static/&quot;\n},</p>\n<pre><code> devtool: &quot;source-map&quot;,\n\n resolve: {\n   extensions: [&quot;.ts&quot;, &quot;.tsx&quot;, &quot;.js&quot;, &quot;.json&quot;],\n   modules: [\n     __dirname + &quot;/web/static/js&quot;,\n     __dirname + &quot;/node_modules&quot;\n   ],\n   alias: {\n     phoenix_html: __dirname + &quot;/deps/phoenix_html/web/static/js/phoenix_html.js&quot;,\n     phoenix: __dirname + &quot;/deps/phoenix/web/static/js/phoenix.js&quot;\n   }\n },\n\n module: {\n   rules: [\n     { test: /\\.tsx?$/, loader: &quot;awesome-typescript-loader&quot; },\n     { enforce: &quot;pre&quot;, test: /\\.js$/, loader: &quot;source-map-loader&quot; },\n     {\n       test: /\\.(woff|woff2)(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n       loader: &quot;url-loader?limit=10000&amp;mimetype=application/font-woff&quot;\n     },\n     {\n       test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n       loader: &quot;url-loader?limit=10000&amp;mimetype=application/octet-stream&quot;\n     },\n     {\n       test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n       loader: &quot;file-loader&quot;\n     },\n     {\n       test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n       loader: &quot;url-loader?limit=10000&amp;mimetype=image/svg+xml&quot;\n     },\n     {\n       test: /\\.scss$/,\n       use: ExtractTextPlugin.extract({ fallback: &quot;style-loader&quot;, use: [&quot;css-loader&quot;, &quot;sass-loader&quot;] })\n     },\n     { test: /\\.css$/, loader: ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader' }) },\n   ]\n },\n plugins: [\n   new ExtractTextPlugin(&quot;css/app.css&quot;),\n   new CopyWebpackPlugin([{ from: &quot;./web/static/assets&quot; }])\n ]\n</code></pre>\n<p>};</p>\n<p>ざっとは理解してるはずですが、細かいところまでは理解しきれてません・・・</p>\n<h1>============================================\nPhoenixの設定ファイル変更</h1>\n<p><code>phoenix</code> 側で <code>brunch</code> 前提の設定になっていたところを変えます。</p>\n<p><code>config/dev.exs</code> です。</p>\n<p>.. code-block:: elixir</p>\n<p>use Mix.Config</p>\n<h1>For development, we disable any cache and enable</h1>\n<h1>debugging and code reloading.</h1>\n<h1></h1>\n<h1>The watchers configuration can be used to run external</h1>\n<h1>watchers to your application. For example, we use it</h1>\n<h1>with brunch.io to recompile .js and .css sources.</h1>\n<p>config :test, Test.Endpoint,\nhttp: [port: 4000],\ndebug_errors: true,\ncode_reloader: true,\ncheck_origin: false,\nwatchers: [node: [&quot;node_modules/webpack/bin/webpack.js&quot;,\n&quot;--watch-stdin&quot;, &quot;--progress&quot;, &quot;--colors&quot;]]\n…</p>\n<h1>============================================\ncssの変更</h1>\n<p>さらに、このままだと <code>css</code> 周りが色々とうまくいかないです。</p>\n<p>まず <code>app.css</code> を <code>app.scss</code> に変更し、以下のような感じにします。</p>\n<p>.. code-block:: css</p>\n<p>$icon-font-path: '~bootstrap-sass/assets/fonts/bootstrap/';\n@import &quot;~bootstrap-sass/assets/stylesheets/_bootstrap.scss&quot;;</p>\n<p>/* Space out content a bit */</p>\n<p>body,\nform,\nul,\ntable {\nmargin-top: 20px;\nmargin-bottom: 20px;\n}</p>\n<p>/* Phoenix flash messages */</p>\n<p>.alert:empty {\ndisplay: none;\n}</p>\n<p>/* Phoenix inline forms in links and buttons */</p>\n<p>form.link,\nform.button {\ndisplay: inline;\n}</p>\n<p>/* Custom page header */</p>\n<p>.header {\nborder-bottom: 1px solid #e5e5e5;\n}</p>\n<p>.logo {\nwidth: 519px;\nheight: 71px;\ndisplay: inline-block;\nmargin-bottom: 1em;\nbackground-image: url(&quot;/images/phoenix.png&quot;);\nbackground-size: 519px 71px;\n}</p>\n<p>/* Everything but the jumbotron gets side spacing for mobile first views */</p>\n<p>.header,\n.marketing {\npadding-right: 15px;\npadding-left: 15px;\n}</p>\n<p>/* Customize container */</p>\n<p>@media (min-width: 768px) {\n.container {\nmax-width: 730px;\n}\n}</p>\n<p>.container-narrow&gt;hr {\nmargin: 30px 0;\n}</p>\n<p>/* Main marketing message */</p>\n<p>.jumbotron {\ntext-align: center;\nborder-bottom: 1px solid #e5e5e5;\n}</p>\n<p>/* Supporting marketing content */</p>\n<p>.marketing {\nmargin: 35px 0;\n}</p>\n<p>/* Responsive: Portrait tablets and up */</p>\n<p>@media screen and (min-width: 768px) {\n/* Remove the padding we set earlier <em>/\n.header,\n.marketing {\npadding-right: 0;\npadding-left: 0;\n}\n/</em> Space out the masthead <em>/\n.header {\nmargin-bottom: 30px;\n}\n/</em> Remove the bottom border on the jumbotron for visual effect */\n.jumbotron {\nborder-bottom: 0;\n}</p>\n<p><code>import</code> 部分以降が何かというと <code>phoenix.css</code> にかかれていたやつです。</p>\n<p>組み込みの <code>phoenix.css</code> を眺めた感じ、ここに <code>bootstrap</code> の内容+αが書かれていたようでした。\n<code>bootstrap</code> は外部から持ってくるようにしたので不要です。</p>\n<p>従って+α部分をこっちに持ってきた形です。</p>\n<h1>============================================\n実行</h1>\n<p><code>npm run compile</code> もしくは <code>Phoenix</code> を起動し、ファイル監視が始まればOKです。</p>\n<p><code>TypeScript</code> 周りは簡単でしたが、 <code>css</code> 周りが大変でした・・・</p>\n<p>適当に書いたので間違っているところも多そうですが、単なる備忘録なのでこのへんで終わりです。</p>",
      "date_published": "2017-06-18T23:40:00Z"
    }
  ]
}